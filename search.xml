<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机基础（原理掌控篇）</title>
      <link href="/2022/03/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot(实用开发篇)</title>
      <link href="/2022/03/27/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/"/>
      <url>/2022/03/27/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h6 id="1-启动热部署-导入插件，需要重新构建项目-仅仅代表restart的过程"><a href="#1-启动热部署-导入插件，需要重新构建项目-仅仅代表restart的过程" class="headerlink" title="1.启动热部署,导入插件，需要重新构建项目,仅仅代表restart的过程"></a>1.启动热部署,导入插件，需要重新构建项目,仅仅代表restart的过程</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启（restart）:自定义开发代码，包含类，页面，配置文件等等,加载位置restart类加载器<br>重载（reload）:jar包，加载位置:base类加载器，第一次加载时候会重载</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot(基础运维篇)</title>
      <link href="/2022/03/23/springboot(%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4%E7%AF%87)/"/>
      <url>/2022/03/23/springboot(%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4%E7%AF%87)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>小tips:选中两个文件，右键选择compare file,可以比较两个文件的不同</p><h6 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml:"></a>pom.xml:</h6><p>start:<br>springBoot中常见项目名称，定义了当前项目使用的<strong>所有依赖坐标</strong>，以达到减少依赖配置的目的，根据所需的功能导入相应的starter<br>parent:<br>所有springBoot项目要继承的项目，定义了若干个<strong>版本号</strong>（依赖管理，而非依赖），解决版本冲突<br>实际开发：<br>使用任意坐标时，仅书写gav中的g和a，v由springBoot提供<br>如果坐标发生冲突，在指定version,入druid没收录到boot中</p><h6 id="引导类："><a href="#引导类：" class="headerlink" title="引导类："></a>引导类：</h6><p>springboot本质也是把bean交给容器，初始化spring容器，扫描引导类所在的包加载bean</p><p><strong>默认会扫描当前引导类同级的包（类）和同级包下的子包</strong>，在别的地方扫描不到注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot0101QuickstartApplication</span> &#123;</span><br><span class="line"><span class="comment">//相当于配置类</span></span><br><span class="line"><span class="comment">//默认会扫描当前引导类同级的包（类）和同级包下的子包</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Springboot0101QuickstartApplication.class, args);</span><br><span class="line">      <span class="type">BookController</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(BookController.class);</span><br><span class="line">      System.out.println(<span class="string">&quot;bean=========&gt;&quot;</span>+bean);</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ctx.getBean(User.class);</span><br><span class="line">      System.out.println(user);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注解源码：</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure><h6 id="tomcat-tomcat-emed-core运行-内嵌tomcat-把tomcat容器以对象的形式加入到spring容器中管理。"><a href="#tomcat-tomcat-emed-core运行-内嵌tomcat-把tomcat容器以对象的形式加入到spring容器中管理。" class="headerlink" title="tomcat:tomcat-emed-core运行:内嵌tomcat,把tomcat容器以对象的形式加入到spring容器中管理。"></a>tomcat:tomcat-emed-core运行:内嵌tomcat,把tomcat容器以对象的形式加入到spring容器中管理。</h6><p>如果想指定自己的服务器，排除tomcat依赖可以加exclusions,此时使用不了tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这回可以使用jetty服务器,导入<strong>start</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="基于restful开发"><a href="#基于restful开发" class="headerlink" title="基于restful开发"></a>基于restful开发</h6><p>描述模块名称通常是复数，也就是加S的格式描述，表示此类资源，而不是单个资源，例如:users,books,accounts….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用method在requestMapping写</span></span><br><span class="line"><span class="comment"> * GET:查找资源  /users /users/1</span></span><br><span class="line"><span class="comment"> * POST：新建资源,保存 /users</span></span><br><span class="line"><span class="comment"> * PUT：更新资源，修改  /users</span></span><br><span class="line"><span class="comment"> * DELETE：删除资源 /users/1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * RequestBody:用于接收json数据（请求体）,多数是json传过来</span></span><br><span class="line"><span class="comment"> * RequestParam:用于接收url地址传参或者表单传参，非json</span></span><br><span class="line"><span class="comment"> * PathVariable:用于接收路径参数，使用&#123;参数名称&#125;描述路径参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Restful</span> &#123;</span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="comment">//value里面的id和封装到mvc里面的Integer id</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete..&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;<span class="comment">//requestbody接收前端发的json数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user update&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ResponseBody  //都返回字符串就写，代表所有的方法都返回responseBody</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span><span class="comment">//都返回字符串的controller=controller+responsebody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span><span class="comment">//以后访问都是从/user开始</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Restful_1</span> &#123;</span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="comment">//value = &quot;/users&quot;,可以省略</span></span><br><span class="line">   <span class="comment">// @RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping</span><span class="comment">//相当于@RequestMapping+post提交</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="comment">//  value中的/users可以省略</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><span class="comment">//@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete..&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user update&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：后期开发中，发出请求参数超过一个时，以json为主，@requestbody比较广，非json数据，选用@requestParam接收请求参数<br>采用restful进行开发，参数数量少时，采用@pathvariable接收请求路径变量，通常用于传递id的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入集合，用@requestBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/quick15&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save15</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#字符串可以直接书写，也可以加引号</span><br><span class="line">country: china</span><br><span class="line">province: beijing</span><br><span class="line">city: beijing</span><br><span class="line">area: dalian</span><br><span class="line">adc: 123</span><br><span class="line">party: true</span><br><span class="line">birthday: 1949-10-01</span><br><span class="line"></span><br><span class="line">user: #同样的名称不允许重复,user对象</span><br><span class="line">  name: zzh</span><br><span class="line">  age: 16</span><br><span class="line">#五级层级，对象里套对象</span><br><span class="line">a:</span><br><span class="line">  b:</span><br><span class="line">    c:</span><br><span class="line">      d:</span><br><span class="line">        e: 123</span><br><span class="line">#数组</span><br><span class="line">likes:</span><br><span class="line">  - game</span><br><span class="line">  - music</span><br><span class="line">  - sleep</span><br><span class="line">  - 123</span><br><span class="line">#缩略版数组</span><br><span class="line">likes2: [game,music,sleep]</span><br><span class="line">#对象数组</span><br><span class="line">users:</span><br><span class="line">  - name: zhangsan</span><br><span class="line">    age: 18</span><br><span class="line">  - name: lisi</span><br><span class="line">    age: 20</span><br><span class="line">users2:</span><br><span class="line">  -</span><br><span class="line">    name: zhangsan</span><br><span class="line">    age: 18</span><br><span class="line">  -</span><br><span class="line">    name: lisi</span><br><span class="line">    age: 20</span><br><span class="line">users3: [&#123;name:zhangsan,age:18&#125;,&#123;name:lisi,age:20&#125;]</span><br><span class="line"></span><br><span class="line">baseDir: c:\windows</span><br><span class="line">#使用$&#123;属性名&#125;引用数据</span><br><span class="line">#tempDiv: c:\windows\temp</span><br><span class="line">tempDir: $&#123;basedir&#125;\temp</span><br><span class="line">#使用引号包裹的字符串,转义字符可以生效</span><br><span class="line">tempDir2: &quot;$&#123;basedir&#125;\temp&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建类，用于封装下面的数据</span><br><span class="line">#由spring帮我们加载数据到对象中，一定要告诉spring加载这组信息</span><br><span class="line">#使用的时候从spring中直接获取信息使用</span><br><span class="line">datasource:</span><br><span class="line">  driver: com.mysql.jdbc.Driver</span><br><span class="line">  url: jdbc:mysql://localhost/springboot_db</span><br><span class="line">  username: root</span><br><span class="line">  password: zzh</span><br><span class="line">  #这就是相当于server的对象，里面一个属性port是8080,交给tomcat管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">  #加上下面这俩后：http://localhost:8080/test/books</span><br><span class="line">#  servlet:</span><br><span class="line">#    context-path: /test</span><br></pre></td></tr></table></figure><h6 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此配置是spring-start里面启动的</span></span><br><span class="line"><span class="comment">#修改服务器端口</span></span><br><span class="line"><span class="comment">#server.port=80</span></span><br><span class="line"><span class="comment">#关闭banner</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="comment">#修改banner</span></span><br><span class="line"><span class="comment">#spring.banner.image.location=classpath:libs/zzh.jfif</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#修改日志 info是默认</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">共存叠加（不同）：没有的添加</span>   <span class="string">相互覆盖（相同）：properties&gt;yml&gt;yaml，yal配置多</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串有空格加引号，没有可以不加</span></span><br><span class="line"><span class="comment">#字符串可以直接书写，也可以加引号</span></span><br><span class="line"><span class="attr">country:</span> <span class="string">china</span></span><br><span class="line"><span class="attr">province:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">city:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">area:</span> <span class="string">dalian</span></span><br><span class="line"><span class="attr">adc:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">party:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">birthday:</span> <span class="number">1949-10-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user:</span> <span class="comment">#同样的名称不允许重复,user对象</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zzh</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line"><span class="comment">#五级层级，对象里套对象</span></span><br><span class="line"><span class="attr">a:</span></span><br><span class="line">  <span class="attr">b:</span></span><br><span class="line">    <span class="attr">c:</span></span><br><span class="line">      <span class="attr">d:</span></span><br><span class="line">        <span class="attr">e:</span> <span class="number">123</span></span><br><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">likes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line"><span class="comment">#缩略版数组</span></span><br><span class="line"><span class="attr">likes2:</span> [<span class="string">game</span>,<span class="string">music</span>,<span class="string">sleep</span>]</span><br><span class="line"><span class="comment">#对象数组</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">users2:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">users3:</span> [&#123;<span class="string">name:zhangsan</span>,<span class="string">age:18</span>&#125;,&#123;<span class="string">name:lisi</span>,<span class="string">age:20</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="attr">baseDir:</span> <span class="string">c:\windows</span></span><br><span class="line"><span class="comment">#使用$&#123;属性名&#125;引用数据</span></span><br><span class="line"><span class="comment">#tempDiv: c:\windows\temp</span></span><br><span class="line"><span class="attr">tempDir:</span> <span class="string">$&#123;basedir&#125;\temp</span></span><br><span class="line"><span class="comment">#使用引号包裹的字符串,转义字符可以生效</span></span><br><span class="line"><span class="attr">tempDir2:</span> <span class="string">&quot;$&#123;basedir&#125;\temp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment">#加上下面这俩后：http://localhost:8080/test/books</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">   <span class="attr">context-path:</span> <span class="string">/test#加入上下文，交给tomcat</span></span><br></pre></td></tr></table></figure><h6 id="yaml文件的读取"><a href="#yaml文件的读取" class="headerlink" title="yaml文件的读取"></a>yaml文件的读取</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.读取yaml数据中的单一数据</span></span><br><span class="line"><span class="comment">//基本数据类型用value</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br><span class="line"><span class="comment">//2.两级数据的读取</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name1;</span><br><span class="line"><span class="comment">//3.读取数组的数据 从0开始</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;likes[1]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String likes1;</span><br><span class="line"><span class="comment">//4.读取对象数组的属性</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;users[1].age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String age1;</span><br><span class="line"><span class="comment">//5.读取端口号</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer port;</span><br><span class="line"><span class="comment">//6.读取多级目录</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;tempDir&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tempDir;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简化环境配置</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"> System.out.println(env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line"> System.out.println(env.getProperty(<span class="string">&quot;user.name&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把部分交给容器管理</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyDataSource dataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建类，用于封装下面的数据</span><br><span class="line">#由spring帮我们加载数据到对象中，一定要告诉spring加载这组信息</span><br><span class="line">#使用的时候从spring中直接获取信息使用</span><br><span class="line">datasource:</span><br><span class="line">  driver: com.mysql.jdbc.Driver</span><br><span class="line">  url: jdbc:mysql:<span class="comment">//localhost/springboot_db</span></span><br><span class="line">  username: root</span><br><span class="line">  password: zzh</span><br><span class="line">  #这就是相当于server的对象，里面一个属性port是<span class="number">8080</span>,交给tomcat管理</span><br><span class="line"></span><br><span class="line"> * 封装配置文件的部分配置的属性</span><br><span class="line"> * <span class="number">1.</span>定义数据模型封装yaml文件中对应的数据</span><br><span class="line"> * <span class="number">2.</span>定义为spring管控的bean</span><br><span class="line">      </span><br><span class="line"> * <span class="number">3.</span>指定加载的数据</span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;datasource&quot;)</span><span class="comment">//private MyDataSource dataSource;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//也就相当于把配置文件中的datasource封装到MyDataSource属性上，</span></span><br><span class="line"><span class="comment">//并交给spring容器保管</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> &#123;</span><br><span class="line">    <span class="comment">//私有属性名字要与配置文件的名字一样</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="mybatis配置datasource"><a href="#mybatis配置datasource" class="headerlink" title="mybatis配置datasource:"></a>mybatis配置datasource:</h6><p>1.导入mysql和mybatis坐标（选）<br>2.配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置相关信息，这里的spring代表的是boot</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC#设定时区</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zzh</span></span><br></pre></td></tr></table></figure><p>@Mapper注解可以去掉，但是要在启动类上加上@MapperScan,如@MapperScan(“com.zzh.mybatisplus.mapper”)</p><h6 id="mybatisplus整合springboot，当表名和实体类名不一致的时候（按照实体类名找表名）"><a href="#mybatisplus整合springboot，当表名和实体类名不一致的时候（按照实体类名找表名）" class="headerlink" title="mybatisplus整合springboot，当表名和实体类名不一致的时候（按照实体类名找表名）"></a>mybatisplus整合springboot，当表名和实体类名不一致的时候（按照实体类名找表名）</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置mp相关的配置</span></span><br><span class="line"><span class="comment">#mybatis-plus:</span></span><br><span class="line"><span class="comment">#  global-config:</span></span><br><span class="line"><span class="comment">#    db-config:</span></span><br><span class="line"><span class="comment">#      table-prefix: tbl_</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tbl_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;&#125;</span><br></pre></td></tr></table></figure><h6 id="springboot整合druid-直接敲druid"><a href="#springboot整合druid-直接敲druid" class="headerlink" title="springboot整合druid(直接敲druid)"></a>springboot整合druid(直接敲druid)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">##配置相关信息,默认有内置数据源</span><br><span class="line">#spring:</span><br><span class="line">#  datasource:</span><br><span class="line">#    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">#    url: jdbc:mysql:<span class="comment">//localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">#    username: root</span><br><span class="line">#    password: zzh</span><br><span class="line">#    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#推荐使用</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql:<span class="comment">//localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      username: root</span><br><span class="line">      password: zzh</span><br></pre></td></tr></table></figure><h6 id="ssmp整合（小demo）"><a href="#ssmp整合（小demo）" class="headerlink" title="ssmp整合（小demo）:"></a>ssmp整合（小demo）:</h6><p>   lombok不用写版本,因为parent已经收录了lombok版本，但是start和start-web没内嵌，所以要自己写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>domain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#druid配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">zzh</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span></span><br><span class="line"><span class="comment">#mybatisplus配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_#设置前缀</span></span><br><span class="line">      <span class="comment">#设置自增策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="comment">#mybatisplus日志：</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>   <span class="comment">#打印到控制台  </span></span><br></pre></td></tr></table></figure><p>Dao(mapper)层:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">   <span class="comment">// @Override用于测试是否原框架里面有，如果报错就是有</span></span><br><span class="line">    <span class="comment">//这几个方法是框架没有提供的，需要自己写的</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveBook</span><span class="params">(Book book)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">modify</span><span class="params">(Book book)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize,Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServiceImpl&lt;BookDao, Book&gt;前者传的是mapper，后者是domain</span></span><br><span class="line"><span class="comment"> * 当提供的不满足我所需的业务逻辑可以去重载或者功能追加，尽量追加</span></span><br><span class="line"><span class="comment"> * 对应ibookservice</span></span><br><span class="line"><span class="comment"> * 返回条数改成boolean类型，判断大于0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">    <span class="comment">//此时实现iBookservice要把所有方法都重写，除了serviceImpl的方法也要都重写了</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book)&gt;<span class="number">0</span>;<span class="comment">//写自己需要的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modify</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//前端传的参数封装到Book book</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize,Book book)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">        lqw.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription());</span><br><span class="line">        IPage page=<span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        bookDao.selectPage(page,lqw);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层（版本一）：@PathVariable代表从路径中获取变量，@RequestBody代表从请求体中获取json数据</p><ul><li>GET:查找资源  &#x2F;users &#x2F;users&#x2F;1</li><li>POST：插入,新建资源,保存 &#x2F;users</li><li>PUT：更新资源，修改  &#x2F;users</li><li>DELETE：删除资源 &#x2F;users&#x2F;1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService iBookService;</span><br><span class="line">    <span class="meta">@GetMapping</span><span class="comment">//查询全是get请求</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iBookService.list();<span class="comment">//return的对象封装成json类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有post请求才有请求体</span></span><br><span class="line">    <span class="meta">@PostMapping</span><span class="comment">//添加操作,通过异步通过请求体传json数据</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iBookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span><span class="comment">//更新操作，传入的也是json（请求体）</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iBookService.modify(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;<span class="comment">//两个id相对应</span></span><br><span class="line">        <span class="keyword">return</span> iBookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iBookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询都是get请求，分页属于业务，在dao层写不合适</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iBookService.getPage(currentPage,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//service的分页写法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage, pageSize);</span><br><span class="line">        bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前端说，你小子不讲究啊，有时候传json数组，有时候传true,false啥的，就不能把数据格式做成一样的</p><p>前后端数据一致性的处理：<br>问题引出：｛”data” ： 数据｝,｛”data” : null｝,查询不存在的数据，返回null,查询过程中抛异常了，catch中抛出null,这回null是数据不存在，还是抛异常了了<br>改正：加入一个flag,如果flag是true，则代表查询数据不存在，如果flag是false，则代表查询过程抛异常<br>{“flag”,true,”data”,null}成功，{“flag”,false,”data”,null}失败设计一个模型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//有可能有集合，有可能ipage,数据类型不确定</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag, String msg)</span> &#123;<span class="comment">//已经没数据了还传你妈呢</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二版的controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="comment">//查询flag都是true</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController2</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService iBookService;</span><br><span class="line">    <span class="meta">@GetMapping</span><span class="comment">//查询全是get请求</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,iBookService.list());<span class="comment">//return的对象封装成json类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有post请求才有请求体</span></span><br><span class="line">    <span class="meta">@PostMapping</span><span class="comment">//添加操作,通过异步通过请求体传json数据</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//boolean flag = iBookService.save(book);</span></span><br><span class="line">        <span class="comment">//r.setData(null);不加也是空</span></span><br><span class="line">        <span class="keyword">if</span> (book.getName().equals(<span class="string">&quot;123&quot;</span>))<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>();</span><br><span class="line"><span class="comment">//&quot;添加成功^_^&quot;,&quot;添加失败-_-!&quot;</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> iBookService.save(book);</span><br><span class="line">        <span class="comment">//目的：国际化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(flag,flag?<span class="string">&quot;添加成功^_^&quot;</span>:<span class="string">&quot;添加失败-_-!&quot;</span>);`</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span><span class="comment">//更新操作</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(iBookService.modify(book));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;<span class="comment">//两个id相对应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(iBookService.delete(id));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><span class="comment">//查询</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,iBookService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询都是get请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize,Book book)</span>&#123;</span><br><span class="line">        <span class="comment">//如果当前页码值大于总页码值，那么重新执行查询操作，使用当前页码值作为对象</span></span><br><span class="line">        IPage&lt;Book&gt; page = iBookService.getPage(currentPage, pageSize,book);`</span><br><span class="line">        <span class="keyword">if</span> (currentPage&gt;page.getPages())&#123;<span class="comment">//补救性方案</span></span><br><span class="line">            page=iBookService.getPage((<span class="type">int</span>)page.getPages(),pageSize,book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springBoot运维篇："><a href="#springBoot运维篇：" class="headerlink" title="springBoot运维篇："></a>springBoot运维篇：</h3><p>打包跳过测试：雷电状的图标<br>pom.xml：有此插件打的jar包才能运行，而且插件会把pom.xml所加的依赖jar包都打入到总jar包中，如果没有此插件，则不会有那些依赖所对应的java包，这些程序能独立运行依赖两个点，1.把所有程序放在classes路径下,2.所有的依赖放在lib下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-maven-plugin插件的作用</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>windows端口被占用（了解）：</p><p>查找端口被占用：nestat -ano|findstr “8080”<br>杀掉占用8080端口的进程：taskkill -f -pid”9480”</p><p>linux上运行springboot程序<br>1.用maven打jar包<br>2.导入jar包，安装包在&#x2F;usr&#x2F;local自定义的目录下<br>3.linux导入数据库,在windows连接数据库<br>换ip地址（192.168.217.135）虚拟机ip<br>输入账号密码，插入表数据</p><p>解决linux的霸屏模式：在后台运行，但是日志输出到文件中（可指定）<br>nohup java-jar springboot-08_ssmp-0.0.1-SNAPSHOT.jar&gt;server.log2&gt;&amp;1 &amp;<br>此时进程需要进行查询pid然后使用kill命令杀死进程</p><p>如果yml配置文件写死了是8080端口，此时我想切换成80端口，使用临时属性：<br>java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar –server.port&#x3D;80<br>多个临时：<br>java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar –server.port&#x3D;80 –spring.datasource.druid.password&#x3D;123<br>属性优先级：<br>命令行大于yaml中的属性<br>idea设置临时属性:</p><p><img src="/2022/03/23/springboot(%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4%E7%AF%87)/qdkRsK.md.png"></p><p>在program arguments中配置属性  –server.port&#x3D;8081 –a&#x3D;b(忘了吧)<br>public static void main(String[] args)输出args就是 [–server.port&#x3D;8080  –a&#x3D;b]<br>如果不希望用户在外面把参数加入到后面，就把SpringApplication.run(SSMPApplication.class, args);中的args删掉</p><p>配置文件的分类：<br>比如项目经理想写一套配置用于上线，但是程序员在自己的环境里有一套配置（比如 mysql账号和密码：root,root）<br>如何用项目经理的配置覆盖我本地的配置？<br>1.在多级目录下的yml的文件会覆盖第一级目录下的yml,若有冲突，高级合并低级的，若互补，相互组合生效，经理的配置文件可以放入在config&#x2F;application.yml中<br>2.程序打包后，可以在打包目录同层目录加上一个application.yml文件，此时这个application.yml生效，这个文件给运维人员用<br>3.在程序打包同层创建一个config目录，config目录里面创建一个application.yml文件，此时这个文件生效<br>小结：classpath:application &lt; classpath:config&#x2F;application.yml &lt; file: application.yml &lt; file :config&#x2F;application.yml</p><p>多环境开发：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#应用环境(写一些公共的配置)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="string">active:dev</span></span><br><span class="line">  <span class="comment">#下面三个环境写各自独立的配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure><p>但这么些容易暴露配置信息,分成三个文件，分别是：application-dev.yml,application-pro.yml,application-test.yml<br>还有一个主配置文件application.yml，主的配置文件能覆盖从的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">多配置文件管理（application.yml主环境）：</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="string">active:dev</span>   <span class="comment">#使用dev的环境</span></span><br></pre></td></tr></table></figure><p>多环境开发独立配置文件书写技巧<br>application-devDB.yml<br>application-devRedis.yml<br>application-devMVC.yml加上之前的三个文件<br>在使用include属性在激活指定的环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="string">active:dev</span> <span class="comment">#主配置最后加载</span></span><br><span class="line"><span class="string">include:devDB,devRedis,devMVC</span> <span class="comment">#后一个配置覆盖前一个配置（相同的）</span></span><br><span class="line"><span class="comment">#现写法：</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="string">active:dev</span> <span class="comment">#此时dev最开始加载</span></span><br><span class="line"><span class="attr">group:</span></span><br><span class="line"><span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line"><span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多环节开发配置(冲突)：（maven生产环境（优先)&gt;springboot开发环境的时候）<br>小tips：如果clean都不行的话就去maven中compile一下，从加载一下pom.xml</p><p>日志：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">error</span> <span class="comment">#error级别以下的日志不会报,所有的包的debug信息都会被打印出来</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">private</span> <span class="string">static</span> <span class="string">final</span> <span class="string">Logger</span> <span class="string">log=</span> <span class="string">LoggerFactory.getLogger(BookController.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="string">@GetMapping</span></span><br><span class="line">    <span class="string">public</span> <span class="string">String</span> <span class="string">getById()&#123;</span></span><br><span class="line">        <span class="string">System.out.println(&quot;springboot</span> <span class="string">is</span> <span class="string">running&quot;);</span></span><br><span class="line">        <span class="string">log.info(&quot;info..&quot;);</span></span><br><span class="line">        <span class="string">log.warn(&quot;warn..&quot;);</span></span><br><span class="line">        <span class="string">log.error(&quot;error..&quot;);</span></span><br><span class="line">        <span class="string">log.error(&quot;debug..&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="string">return</span> <span class="string">&quot;springboot is running....&quot;</span><span class="string">;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>小问题：private static final Logger log&#x3D; LoggerFactory.getLogger(BookController.class)这段代码重复解决的通用思路：继承<br>写一个类，然后继承就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(BookController.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> <span class="keyword">extends</span> <span class="title class_">BaseClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info..&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warn..&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error..&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;debug..&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">final</span> Class clazz ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Logger log;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        clazz=<span class="built_in">this</span>.getClass();</span><br><span class="line">        log=LoggerFactory.getLogger(clazz)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lombok:@Slf4j插入日志对象，非常快</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实战篇（缓存加锁篇）</title>
      <link href="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/"/>
      <url>/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h5 id="前置工作："><a href="#前置工作：" class="headerlink" title="前置工作："></a>前置工作：</h5><p>总会遗忘：json传递会把int自动转换成string,别再手欠去自己转了<br>小技巧：ctrl+alt+b可以直接跳转到接口所在的实现类<br>redis工作流程（个人见解）：redis是把数据库的值根据业务逻辑加到redis中，可以先把相关的值导入redis，为数据库阻挡来自千亿级别的查询，然后请求数据库之前，直接redis就帮返回数据了<br>json的不确定的话要用object来存储<br>返回值的泛型和传入参数的泛型一样，可以形成参数的对照</p><h6 id="导入表："><a href="#导入表：" class="headerlink" title="导入表："></a>导入表：</h6><p>ltb_user：用户表</p><p>ltb_user_info：用户详情表</p><p>ltb_shop：商户信息表</p><p>ltb_shop_type：商户类型表</p><p>ltb_blog：用户日记表（达人探店日记）</p><p>ltb_follow：用户关注表</p><p>ltb_voucher：优惠券表</p><p>ltb_voucher_order：优惠券的订单表<br>采用前后端分离架构：通过ajax访问mysql或者redis返回数据（动态），或者访问nginx返回静态页面，可以形成负载均衡的集群</p><h6 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h6><p>start nginx.exe</p><h6 id="实现发送短信验证码"><a href="#实现发送短信验证码" class="headerlink" title="实现发送短信验证码"></a>实现发送短信验证码</h6><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span> userService.sendCode(phone,session);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//service:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//1.校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">            <span class="comment">//2.如果不符合返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.符合，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//4.保存验证码到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">        <span class="comment">//5.发送验证码,模拟发送</span></span><br><span class="line">        log.debug(<span class="string">&quot;发送短信验证码成功,验证码：&#123;&#125;&quot;</span>,code);</span><br><span class="line">        <span class="comment">//6.返回ok</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现验证码登录和注册功能："><a href="#实现验证码登录和注册功能：" class="headerlink" title="实现验证码登录和注册功能："></a>实现验证码登录和注册功能：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LoginFormDTO：</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFormDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="keyword">return</span> userService.login(loginForm,session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//1.校验手机号（再一次校验）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">            <span class="comment">//2.如果不符合返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.校验验证码</span></span><br><span class="line">        <span class="comment">//从session中取出验证码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">cacheCode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        String code=loginForm.getCode();</span><br><span class="line">        <span class="keyword">if</span> (cacheCode==<span class="literal">null</span>||!cacheCode.toString().equals(code))&#123;<span class="comment">//验证码失败或者过期</span></span><br><span class="line">            <span class="comment">//3.验证码不一致，报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.一致，根据手机号去数据库查询用户:select * from tb_user where phone =?</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();<span class="comment">//根据用户id查询一个user</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//6.不存在，创建新用户，并且保存</span></span><br><span class="line">           user=createUserWithPhone(phone);<span class="comment">//根据手机号创建</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.保存信息到session中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建用户</span></span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPhone(phone);</span><br><span class="line">        user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(<span class="number">10</span>));<span class="comment">//随便设置名称</span></span><br><span class="line">        <span class="comment">//2.保存用户</span></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="登录验证（查询用户信息，返回到那个页面，不做这步登录校验登录后还是返回login页面，没有用户信息）"><a href="#登录验证（查询用户信息，返回到那个页面，不做这步登录校验登录后还是返回login页面，没有用户信息）" class="headerlink" title="登录验证（查询用户信息，返回到那个页面，不做这步登录校验登录后还是返回login页面，没有用户信息）"></a>登录验证（查询用户信息，返回到那个页面，不做这步登录校验登录后还是返回login页面，没有用户信息）</h6><p>思路：利用jsessionid,但是随着开发越来越多的controller业务（比如userController，OrderController等），用拦截器<br>但是拦截器校验了controller怎么校验呢？<br>这时需要拦截器把数据传递给controller，但是要考虑线程安全<br>这时：使用threadlocal保存用户去保证线程的安全，每个线程相互不干扰</p><h6 id="注册拦截器："><a href="#注册拦截器：" class="headerlink" title="注册拦截器："></a>注册拦截器：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>);<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="配置拦截器："><a href="#配置拦截器：" class="headerlink" title="配置拦截器："></a>配置拦截器：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取session</span></span><br><span class="line">        HttpSession session=request.getSession();</span><br><span class="line">        <span class="comment">//2.获取session的用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3.判断是否存在用户</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截,返回401状态码，代表未授权</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.存在，保存用户到threadLocal</span></span><br><span class="line">        UserHolder.saveUser((User) user);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//DispatcherServlet进行视图的渲染之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//做一些销毁工作，防止内存泄漏等等</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 获取当前登录的用户并返回</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">    <span class="comment">//返回数据渲染之后会调用afterCompletion</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="隐藏用户敏感信息：（response返回的信息都在明文里）"><a href="#隐藏用户敏感信息：（response返回的信息都在明文里）" class="headerlink" title="隐藏用户敏感信息：（response返回的信息都在明文里）"></a>隐藏用户敏感信息：（response返回的信息都在明文里）</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1010</span><span class="punctuation">,</span><span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span><span class="string">&quot;15641204526&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span><span class="string">&quot;user_rgpuhazzok&quot;</span><span class="punctuation">,</span><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-03-27T16:37:49&quot;</span><span class="punctuation">,</span><span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-03-27T16:37:49&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="思路改进：session是在tomcat内存当中的，所以不应该存太多数据，如果数据存多了容易卡顿"><a href="#思路改进：session是在tomcat内存当中的，所以不应该存太多数据，如果数据存多了容易卡顿" class="headerlink" title="思路改进：session是在tomcat内存当中的，所以不应该存太多数据，如果数据存多了容易卡顿"></a>思路改进：session是在tomcat内存当中的，所以不应该存太多数据，如果数据存多了容易卡顿</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到serviceImpl中,把session.setAttribute(“user”,user)改成session.setAttribute(“user”,userDTO),此种方法可以保证页面渲染的时候不返回敏感信息，之后把所有的User转换成UserDTO</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1010</span><span class="punctuation">,</span><span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span><span class="string">&quot;user_rgpuhazzok&quot;</span><span class="punctuation">,</span><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="集群的数据共享问题-redis的引入-："><a href="#集群的数据共享问题-redis的引入-：" class="headerlink" title="集群的数据共享问题(redis的引入)："></a>集群的数据共享问题(redis的引入)：</h6><p>session共享问题：多台Tomcat并不共享session存储空间，当请求切换到不同tomcat服务时导致数据丢失问题<br>session的替代方案应该满足：<br>1.数据共享，2.内存存储，3.key-value结构<br>redis首当其冲</p><h6 id="基于redis实现共享session登录"><a href="#基于redis实现共享session登录" class="headerlink" title="基于redis实现共享session登录"></a>基于redis实现共享session登录</h6><p>以手机号为key，验证码为value，session有jsession,你登录一次服务器会记住你，而redis不一样，怎么办，怎么解决，怎么做？思考<br>思考：保存验证码为  key:value分别是 <u>phone:13838411438</u> :9527,而登录验证的时候也需要取出此key和value，这不就简单了嘛</p><p>但是此时用string也不太好，因为保存的结果是user1:{name:”jack”,age:21}，如果想修改或者添加字段会费劲<br>而用hash可以完美的保存对象user1:  name:”zzh” age:21可以随意的添加字段等信息<br>但是用手机号为key也不太好,所以用随机值token,有信息泄漏，但是吧，这个键值对不是像session那样由tomcat维护的，所以需要我们自己来维护</p><p>数据类型：验证码：key:phone value:验证码     返回的用户信息：key:token,value:用户信息</p><p>定义一些常量，看起来不low</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_CODE_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:code:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_CODE_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_USER_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:token:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_USER_TTL</span> <span class="operator">=</span> <span class="number">36000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_NULL_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_SHOP_TTL</span> <span class="operator">=</span> <span class="number">30L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;cache:shop:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;lock:shop:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOCK_SHOP_TTL</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECKILL_STOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;seckill:stock:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLOG_LIKED_KEY</span> <span class="operator">=</span> <span class="string">&quot;blog:liked:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FEED_KEY</span> <span class="operator">=</span> <span class="string">&quot;feed:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHOP_GEO_KEY</span> <span class="operator">=</span> <span class="string">&quot;shop:geo:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_SIGN_KEY</span> <span class="operator">=</span> <span class="string">&quot;sign:&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 赵志海</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这个有configuration，所以可以被发现，可以使用注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(stringRedisTemplate))</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>);<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//1.校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//2.如果不符合返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.符合，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//4.保存验证码到redis,ctrl+p,并设计过期时间为两分钟</span></span><br><span class="line">        <span class="comment">//set key value ex 120</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.发送验证码,模拟发送</span></span><br><span class="line">        log.debug(<span class="string">&quot;发送短信验证码成功,验证码：&#123;&#125;&quot;</span>, code);</span><br><span class="line">        <span class="comment">//6.返回ok</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.校验手机号（再一次校验）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//2.如果不符合返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.校验验证码</span></span><br><span class="line">        <span class="comment">//从redis中取出验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.toString().equals(code)) &#123;<span class="comment">//验证码失败或者过期</span></span><br><span class="line">            <span class="comment">//3.验证码不一致，报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.一致，根据手机号去数据库查询用户:select * from tb_user where phone =?</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();<span class="comment">//根据用户id查询一个user</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//6.不存在，创建新用户，并且保存</span></span><br><span class="line">            user = createUserWithPhone(phone);<span class="comment">//根据手机号创建</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.保存信息到redis中</span></span><br><span class="line">        <span class="comment">//7.1，随机生成token，作为登录令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//7.2，将User对象转为hash存储(token为key)</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">        <span class="comment">//把user---&gt;map</span></span><br><span class="line">           Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">                CopyOptions.create().setIgnoreNullValue(<span class="literal">true</span>).setFieldValueEditor((fieldName,filedValue) -&gt; filedValue.toString()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//7.3,存储</span></span><br><span class="line">        String tokenKey=LOGIN_USER_KEY+token;</span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(tokenKey,userMap);</span><br><span class="line">        <span class="comment">//7.4,设置token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(token,LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//返回token</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">        <span class="comment">//但是有个问题：咱就是说，session只要访问就一直刷新这30min,但是这个不刷新，所以需要在拦截器续期</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPhone(phone);</span><br><span class="line">        user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));<span class="comment">//随便设置名称</span></span><br><span class="line">        <span class="comment">//2.保存用户</span></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">*token保存到客户端，下回再次访问的时候会携带token这个请求头去请求服务器</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">//不存在，拦截,返回401状态码，代表未授权</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.基于token获取redis中的用户</span></span><br><span class="line">        String key=RedisConstants.LOGIN_USER_KEY+token;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash()</span><br><span class="line">                .entries(key);<span class="comment">//这个方法能取到多个键值对</span></span><br><span class="line">        <span class="comment">//3.判断是否存在用户</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截,返回401状态码，代表未授权</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.将查询到的hash数据转为userDTO对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6.存在，保存用户到threadLocal</span></span><br><span class="line">        UserHolder.saveUser((userDTO));</span><br><span class="line">        <span class="comment">//7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key,RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//做一些销毁工作，防止内存泄漏等等</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate 的<span class="type">long</span>不能转换成string</span><br><span class="line">Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO);  # map的值必须是string结构</span><br></pre></td></tr></table></figure><h6 id="提出问题：针对拦截器，拦截的那些路径设置了30min之内刷新重新计时，但是还有一堆没有拦截的界面，如果那些界面超过30秒，我们怎么解决？"><a href="#提出问题：针对拦截器，拦截的那些路径设置了30min之内刷新重新计时，但是还有一堆没有拦截的界面，如果那些界面超过30秒，我们怎么解决？" class="headerlink" title="提出问题：针对拦截器，拦截的那些路径设置了30min之内刷新重新计时，但是还有一堆没有拦截的界面，如果那些界面超过30秒，我们怎么解决？"></a>提出问题：针对拦截器，拦截的那些路径设置了30min之内刷新重新计时，但是还有一堆没有拦截的界面，如果那些界面超过30秒，我们怎么解决？</h6><p>拦截器优化</p><p>弄两个拦截器，第一个拦截器拦截一切的路径，包括获取token,查询redis用户，保存到threadlocal,刷新token有效期，放行<br>第二个拦截器拦截需要登录的路径，查询threadlocal用户，不存在则拦截</p><p>注册拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>).order(<span class="number">1</span>);<span class="comment">//放行</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);<span class="comment">//拦截优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有都拦截的拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">* 由于这个类没加controller,service等注解，所以这个类不能被spring所管理</span><br><span class="line"> * 也就是不能使用注解注入StringRedisTemplate,只能自己去写构造器</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.基于TOKEN获取redis中的用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span>  <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">// 3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.将查询到的hash数据转为UserDTO</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 6.存在，保存用户信息到 ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">// 7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 8.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.判断是否需要拦截（ThreadLocal中是否有用户）</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有，需要拦截，设置状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="comment">// 拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有用户，则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="什么是缓存："><a href="#什么是缓存：" class="headerlink" title="什么是缓存："></a>什么是缓存：</h6><p>缓存是数据交换的缓冲区，是存储数据的临时地方，<strong>一般读写性能较高</strong></p><p>流程：浏览器缓存—-&gt;应用层缓存(tomcat)——–&gt;数据库缓存(索引数据)—–&gt;cpu缓存 or 磁盘缓存<br>缓存是以空间换时间<br>缓存的作用：降低后端的负载，提高读写效率，降低响应时间<br>缓存的成本：数据一致性的成本，代码维护成本（解决一致性的问题，比如缓存穿透），运维成本（为了解决一些问题，需要搭建缓存集群来处理这些问题）</p><p>数据库（未命中）&lt;———–客户端——-&gt;redis缓存（命中）<br>如果未命中，可以把未命中的数据写入到redis缓存当中，命中率越来越高</p><p>添加商户缓存：<br>流程：查询是否有商户缓存，如果有，则直接从缓存中返回数据，如果没有缓存，则写入redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="keyword">implements</span> <span class="title class_">IShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY+ id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);<span class="comment">//key是唯一的</span></span><br><span class="line">        <span class="comment">//此时shopJson是一个字符串，我们需要反序列成对象</span></span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//5.不存在，数据库不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (shop==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop));</span><br><span class="line">        <span class="comment">//7.返回</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存更新策略：</p><p><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qszOZ8.png"></p><p>如果没有查到：就去查数据库，就会更新缓存，所以可以不定时的去清理缓存<br>业务场景：<br>低一致性需求：使用内存淘汰机制，例如店铺类型的查询缓存<br>高一致性需求：主动更新，并以超时剔除作为兜底方案，例如店铺详情查询的缓存<br><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qy99bV.png"></p><p>缓存一般都是在内存存储，一旦宕机就完全丢失<br><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qyCEo8.png"></p><p>线程安全问题：由于写入缓存的速度远远大于更新数据库的操作，所以第二种（先操作数据库，在删除缓存）更不容易发生错误</p><p><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qyPnAK.png" alt=""></p><p>保证原子性：单体就用事务，分布式就用分布式事务</p><p>给查询的缓存添加超时剔除和主动更新的策略：<br>1.根据id查询店铺时，若缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间<br>2.根据id修改店铺时，先<strong>修改数据库，在删除缓存</strong></p><p>缓存更新：<strong>只需要删除缓存就可以了</strong>，可以通过未命中去查询数据库来更新缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">    <span class="keyword">if</span> (id==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.更新数据库</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">//2.删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY+shop.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缓存穿透：是指客户端请求的数据在缓存中和数据库中都不存在，这样这些缓存永远不会生效-不会建立缓存-，这些请求都会打到数据库"><a href="#缓存穿透：是指客户端请求的数据在缓存中和数据库中都不存在，这样这些缓存永远不会生效-不会建立缓存-，这些请求都会打到数据库" class="headerlink" title="缓存穿透：是指客户端请求的数据在缓存中和数据库中都不存在，这样这些缓存永远不会生效(不会建立缓存)，这些请求都会打到数据库"></a>缓存穿透：是指客户端请求的数据在缓存中和数据库中都不存在，这样这些缓存永远不会生效(不会建立缓存)，这些请求都会打到数据库</h6><p>不怀好意的人：可能一直发不存在的请求，大量并发去查询你的数据库，很有可能搞垮数据库<br>解决方案：1.<strong>缓存空对象</strong>（把数据库的null缓存过去）<br>                    优点：实现简单，维护方便<br>                    缺点：额外的内存消耗（可以在返回null设置一个短的ttl，垃圾信息清除），可能造成短期的不一致（在用户访问不存在的数据后，可能我们真的添加了这个不存在的数据，ttl足够短，或者插入后更新缓存）<br>                    2.<strong>布隆过滤</strong>（不是准确的，有一定的缓存穿透风险）：客户端在查询redis之前先查询布隆过滤器，不存在直接拒绝，存在去redis或者数据库<br>                    优点：内存占用较少，没有多余key<br>                    缺点：实现起来相对复杂，存在误判可能<br>                    3.<strong>增加id复杂度</strong>避免让人猜到id规律（主动），id在实际开发中，比较复杂，可以简单的做一些id的校验，做好热点参数限流</p><h6 id="编码解决商铺查询的缓存穿透问题（缓存空对象）："><a href="#编码解决商铺查询的缓存穿透问题（缓存空对象）：" class="headerlink" title="编码解决商铺查询的缓存穿透问题（缓存空对象）："></a>编码解决商铺查询的缓存穿透问题（缓存空对象）：</h6><p><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qynULF.png"></p><p>如果数据库不存在返回一个null值，判断缓存是否命中，先查看是否是空值，如果不是就返回商铺信息</p><p>解决缓存穿透代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="keyword">implements</span> <span class="title class_">IShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY+ id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);<span class="comment">//key是唯一的</span></span><br><span class="line">        <span class="comment">//此时shopJson是一个字符串，我们需要反序列成对象</span></span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<span class="comment">// &quot;&quot;,null,\t,\n等数据都是false</span></span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断命中的是否为空字符串 </span></span><br><span class="line">        <span class="keyword">if</span> (shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//返回错误信息,不让它去查数据库</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//5.不存在，数据库不存在，返回一个空值</span></span><br><span class="line">        <span class="keyword">if</span> (shop==<span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis,并添加过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.返回</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两个if逻辑不能更改 </span></span><br><span class="line"><span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<span class="comment">// &quot;&quot;,null,\t,\n等数据都是false</span></span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断命中的是否为空字符串 </span></span><br><span class="line">        <span class="keyword">if</span> (shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//返回错误信息,不让它去查数据库</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h6 id="缓存雪崩：是指在同一时段，大量的缓存key-过期-同时失效或者Redis服务宕-dang-机-导致大量请求直接到数据库，带来巨大压力"><a href="#缓存雪崩：是指在同一时段，大量的缓存key-过期-同时失效或者Redis服务宕-dang-机-导致大量请求直接到数据库，带来巨大压力" class="headerlink" title="缓存雪崩：是指在同一时段，大量的缓存key(过期)同时失效或者Redis服务宕(dang)机,导致大量请求直接到数据库，带来巨大压力"></a>缓存雪崩：是指在同一时段，大量的缓存key(过期)同时失效或者Redis服务宕(dang)机,导致大量请求直接到数据库，带来巨大压力</h6><p><strong>解决方案</strong>：<br>1.批量数据导入时，给不同的key的TTL添加随机值<br>2.利用redis<strong>集群，哨兵</strong>（主从）提高服务的可用性<br>3.给缓存业务添加降级限流策略，拒绝服务等，保证数据库的健康<br>4.给业务添加多级缓存：请求从浏览器发出，浏览器缓存（只能是静态数据），nginx缓存，jvm缓存，应对亿级以上的并发</p><h6 id="缓存击穿：也被称为热点key问题，就是一个高并发访问并且缓存重建业务较复杂的key突然失效了，无数的访问请求会在瞬间给数据库带来巨大的冲击"><a href="#缓存击穿：也被称为热点key问题，就是一个高并发访问并且缓存重建业务较复杂的key突然失效了，无数的访问请求会在瞬间给数据库带来巨大的冲击" class="headerlink" title="缓存击穿：也被称为热点key问题，就是一个高并发访问并且缓存重建业务较复杂的key突然失效了，无数的访问请求会在瞬间给数据库带来巨大的冲击."></a>缓存击穿：也被称为热点key问题，就是一个高并发访问并且缓存重建业务较复杂的key突然失效了，无数的访问请求会在瞬间给数据库带来巨大的冲击.</h6><p>例子：热点的key失效了，此时多个线程来了无数个请求，查询缓存未命中，就查询数据库重建缓存数据（时间长，比如数据需要计算在缓存等等）<br><strong>解决方案</strong>：<br>                1.互斥锁（只要有一个人获取到锁来创建缓存就行了，其他的一直重试），处理并发差点<br>                2.逻辑过期，添加json的假过期时间：expire,只是逻辑的时间，活动的时候添加，活动结束，移除，开启一个新线程，性能好<br><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qy6SQx.png"></p><p> 两种方案的优点（缺点）：<br><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qy6UXV.md.png"></p><h6 id="coding-基于互斥锁解决缓存击穿的问题"><a href="#coding-基于互斥锁解决缓存击穿的问题" class="headerlink" title="(coding)基于互斥锁解决缓存击穿的问题"></a>(coding)基于互斥锁解决缓存击穿的问题</h6><p>需求：修改根据id查询商铺的业务，基于互斥锁方式来解决缓存击穿的问题<br>小tips:锁，拿到锁的逻辑是由我们自定义的，所以我们要自定义锁，传统锁不可以（使用setnx，当key存在不执行）<br>添加锁：setnx lock 1   释放锁：del lock 1,但是如果因为某个原因出现故障无法释放锁就完了，所以要添加过期时间 </p><p><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qyg9aD.png"></p><p>缓存穿透封装(看之前的就行，这里只是封装了一下而已)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY+ id;</span><br><span class="line">    <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);<span class="comment">//key是唯一的</span></span><br><span class="line">    <span class="comment">//此时shopJson是一个字符串，我们需要反序列成对象</span></span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<span class="comment">// &quot;&quot;,null,\t,\n等数据都是false</span></span><br><span class="line">        <span class="comment">//3.存在，直接返回</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断命中的是否为空字符串</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//返回错误信息,不让它去查数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//5.不存在，数据库不存在，返回一个空值</span></span><br><span class="line">    <span class="keyword">if</span> (shop==<span class="literal">null</span>) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.存在，写入redis,并添加过期时间</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.返回</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="缓存击穿代码（互斥锁）：解决的问题是重建时间久，高并发，利用setnx来设置锁"><a href="#缓存击穿代码（互斥锁）：解决的问题是重建时间久，高并发，利用setnx来设置锁" class="headerlink" title="缓存击穿代码（互斥锁）：解决的问题是重建时间久，高并发，利用setnx来设置锁"></a>缓存击穿代码（互斥锁）：解决的问题是重建时间久，高并发，利用setnx来设置锁</h6><p>我的理解（前言）：当大多数请求访问的时候，都访问同一个redis的setnx，所以可以处理高并发的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO 尝试获取锁</span></span><br><span class="line"> <span class="comment">//TODO 开发细节:工具类不能直接返回，如果直接返回会出现空指针</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">     <span class="comment">//有效期比业务执行时长长十倍到二十倍</span></span><br><span class="line">     <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">     <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//释放锁</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">     stringRedisTemplate.delete(key);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//缓存穿透</span></span><br><span class="line">    <span class="comment">//Shop shop = queryWithPassThrough(id);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY+ id;</span><br><span class="line">    String lockKey= LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);<span class="comment">//key是唯一的</span></span><br><span class="line">        <span class="comment">//此时shopJson是一个字符串，我们需要反序列成对象</span></span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<span class="comment">// &quot;&quot;,null,\t,\n等数据都是false</span></span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断命中的是否为空字符串</span></span><br><span class="line">        <span class="keyword">if</span> (shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//返回错误信息,不让它去查数据库</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.开始实现缓存重建</span></span><br><span class="line">        <span class="comment">//4.1.第一个线程获取互斥锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);<span class="comment">//这个是锁的key，可不是上面缓存的key</span></span><br><span class="line">        <span class="comment">//4.2.判断是否获取成功</span></span><br><span class="line">        <span class="comment">//4.3.失败，休眠重试</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="comment">//重试就是递归</span></span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.4.成功，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//TODO 因为是本地数据库，比较快，这里模拟重建延时</span></span><br><span class="line">        <span class="comment">//5.不存在，数据库不存在，返回一个空值</span></span><br><span class="line">        <span class="keyword">if</span> (shop==<span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis,并添加过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//7.释放互斥锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">        <span class="comment">//8.返回</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="基于逻辑过期的方式解决击穿问题（不是真正的过期）："><a href="#基于逻辑过期的方式解决击穿问题（不是真正的过期）：" class="headerlink" title="基于逻辑过期的方式解决击穿问题（不是真正的过期）："></a>基于逻辑过期的方式解决击穿问题（不是真正的过期）：</h6><p>需求：修改根据id查询的商铺业务，基于逻辑过期方式来解决缓存击穿的问题：</p><p><img src="/2022/03/21/redis%E5%AE%9E%E6%88%98%E7%AF%87/qyqHo9.png"></p><p>如何去设置逻辑过期时间？</p><p>解决方案：<br>                1.在shop类中修改（不友好，直接修改了源码）<br>                2.直接创建逻辑过期时间相关类（推荐）<br>                            (1)让shop去继承此类<br>                            (2)添加一个object data属性（相当于shop）<br><strong>注意</strong>，<strong>这里未命中直接就返回了空，而不是发给数据库传回一个逻辑空值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  <span class="comment">//这里的data就相当于shop</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要添加一些基础数据（有基础数据才能知道是否过期）：预热<br>重建缓存其实就是查询数据库，写入redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先添加店铺信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id,Long expireSeconds)</span>&#123;</span><br><span class="line">    <span class="comment">//1.查询店铺信息</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//2.封装逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    <span class="comment">//设置逻辑过期时间，根据调用者传时间</span></span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">    <span class="comment">//3.把带有逻辑过期时间的数据写入Redis，没有设置ttl</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR= Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY+ id;</span><br><span class="line">    <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);<span class="comment">//key是唯一的</span></span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;<span class="comment">// &quot;&quot;,null,\t,\n等数据都是false</span></span><br><span class="line">        <span class="comment">//3.不存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.命中，需要先把json反序列化成对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(data, Shop.class);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="comment">//5.判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">//5.1.未过期，直接返回店铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;<span class="comment">//未过期，直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.2.已过期，则缓存重建</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.缓存重建</span></span><br><span class="line">    <span class="comment">//6.1.获取互斥锁</span></span><br><span class="line">    String lockKey=LOCK_SHOP_KEY+id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="comment">//6.2.判断是否获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">        <span class="comment">//6.3.成功，开启一个独立线程，实现缓存重建</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//重建缓存 ,设置时间短，容易观察效果，实际上设成30分钟</span></span><br><span class="line">                <span class="built_in">this</span>.saveShop2Redis(id,<span class="number">20L</span>);</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.4.返回过期的商铺信息</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑删除小结：并不是真正的删除了，实际上redis中这个值一直存在的，只是逻辑上删除了，解决大家一起重建缓存的情况，线程安全的问题，有一致性问题，刚开始所有并发得等第一个构建完成才能取到新数据，之前一直取的都是旧的</p><h6 id="缓存工具类的封装（基于StringRedisTemplate-13-24）"><a href="#缓存工具类的封装（基于StringRedisTemplate-13-24）" class="headerlink" title="缓存工具类的封装（基于StringRedisTemplate 13 24）"></a>缓存工具类的封装（基于StringRedisTemplate 13 24）</h6><p>方法1：将任意的java对象序列化为json对象并且存储在string类型的key中，并且设置ttl过期时间<br>方法2：将任意的java对象序列化成为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题<br>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题<br>方法4：根据指定的key查询缓存，并反序列化为指定类型，利用利用逻辑过期的方式解决缓存击穿问题</p><p><strong>小思想：不知道该用什么的怎么办，交给调用者，把逻辑调用给我就行，有参有返回值的函数是Function(R,r),欠缺函数式编程</strong></p><p>传入具体的类型，你得告诉我<br>public &lt;R, ID&gt; R queryWithMutex(<br>            String keyPrefix, ID id, <strong>Class<R> type</R></strong>, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)<br>             return JSONUtil.toBean(shopJson, type);<br><strong>type有可能是shop,有可能是别的，转json的时候需要指定类型，但是不知道是哪个，所以要传过来</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.CACHE_NULL_TTL;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.LOCK_SHOP_KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 赵志海</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        <span class="comment">// 写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//,Function&lt;ID, R&gt;</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.存在，写入redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">// 5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span>(expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">// 6.缓存重建</span></span><br><span class="line">        <span class="comment">// 6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">// 6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">            <span class="comment">// 6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">newR</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, newR, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(shopJson, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.实现缓存重建</span></span><br><span class="line">        <span class="comment">// 4.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="comment">// 4.2.判断是否获取成功</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                <span class="comment">// 4.3.获取锁失败，休眠并重试</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.4.获取锁成功，根据id查询数据库</span></span><br><span class="line">            r = dbFallback.apply(id);</span><br><span class="line">            <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将空值写入redis</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="comment">// 返回错误信息</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 6.存在，写入redis</span></span><br><span class="line">            <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7.释放锁</span></span><br><span class="line">            unlock(lockKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.返回</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存篇完结</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础篇（真的枯燥板）</title>
      <link href="/2022/03/21/redis%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/03/21/redis%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h6 id="1-认识nosql"><a href="#1-认识nosql" class="headerlink" title="1.认识nosql"></a>1.认识nosql</h6><p>sql:支持acid特性:存储到磁盘中，有关联性，数据结构固定，相关业务对安全效率高<br>nosql:事务特性是BASE,存储到内存中，增删改查速率快，数据结构不固定，安全效率不高，对性能要求高</p><p>redis特点：<br>1.键-值，value支持多种数据结构<br>2.单线程，每个命令具有原子性 redis6多线程应对的是请求处理，并不是真正的多线程<br>3.低延迟，速度快（基于<strong>内存</strong>（核心原因），io多路复用，良好的编码）<br>4.支持数据持久化（为了确保安全redis会定期把数据存到磁盘）<br>5.支持主从集群（读写分离，备份），分片集群（数据拆分，存入节点）<br>6.支持多语言客户端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">启动redis:redis默认16个库</span></span><br><span class="line"><span class="string">方式一：直接启动</span></span><br><span class="line"><span class="string">redis-server：是redis的服务端前台启动脚本（不友好）</span></span><br><span class="line"><span class="string">方式二：设置全局变量后启动redis</span></span><br><span class="line"><span class="string">redis</span> <span class="string">-server</span> <span class="string">redis.conf</span></span><br><span class="line"><span class="string">查看是否启动</span></span><br><span class="line"><span class="string">ps</span> <span class="string">-ef|grep</span> <span class="string">redis</span></span><br><span class="line"><span class="string">root</span>      <span class="number">26465</span>      <span class="number">1</span>  <span class="number">0</span> <span class="number">16</span><span class="string">:47</span> <span class="string">?</span>        <span class="number">00</span><span class="string">:00:00</span> <span class="string">redis-server</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:6379</span></span><br><span class="line"><span class="string">关闭redis</span></span><br><span class="line"><span class="string">kill</span> <span class="number">-9</span> <span class="number">14821</span></span><br><span class="line"><span class="string">方式三：开机自启</span></span><br><span class="line"><span class="string">我们启动的是开机自启方式</span></span><br><span class="line"></span><br><span class="line"><span class="string">命令行客户端：</span></span><br><span class="line"><span class="string">redis-cli</span> <span class="string">-h</span> <span class="number">192.168</span><span class="number">.217</span><span class="number">.132</span> <span class="string">-p</span> <span class="number">6379</span> <span class="string">-a</span> <span class="string">1234567890zzh</span></span><br><span class="line"><span class="string">入门：</span></span><br><span class="line"><span class="string">select</span> <span class="number">0</span> <span class="string">选择一号库</span></span><br><span class="line"><span class="string">set</span> <span class="string">name</span> <span class="string">zzh</span></span><br><span class="line"><span class="string">get</span> <span class="string">name</span> <span class="string">结果：&quot;zzh&quot;</span></span><br></pre></td></tr></table></figure><h6 id="2-redis常用命令"><a href="#2-redis常用命令" class="headerlink" title="2.redis常用命令"></a>2.redis常用命令</h6><p>1.redis的数据结构<br>key一般是String,value多种多样<br><strong>查看帮助命令</strong>：help @字段 如help @set</p><p>2.常用指令<br>1).keys:查看所有符合模板的<strong>所有key</strong>： keys *<br>key a*:模糊查询速度慢，不建议在生产环境设备上使用     结果”age”<br>2).del:删除key<br>DEL k1 k2 k3 k4,返回值是删除的数量<br>3).exsit 判断k是否存在<br>4).expire：给一个key设置有效期，有效期到期key会被自动删除<br>5).ttl:查看一个key的有效期 -1代表永久，-2代表到期了</p><h6 id="3-String类型（set）键唯一"><a href="#3-String类型（set）键唯一" class="headerlink" title="3.String类型（set）键唯一"></a>3.String类型（set）键唯一</h6><p>set：添加或修改      mset k1 v1 k2 v2…    mget k1 k2 k3…..<br>incr age:让age自增1<br>incrby age 2:让age自增2<br>incrby age -2：自减2<br>incrbyfloat score 0.5:浮点数增长，必须指定步长<br>setnx:添加一个字符串，如果不存在就添加，如果不存在就添加<br>setex:添加的时候就设置有效期，setex name 10 jack</p><h6 id="4-引出问题：商户和商品信息都存入redis，用户id是1，商品id也是1，如何避免冲突"><a href="#4-引出问题：商户和商品信息都存入redis，用户id是1，商品id也是1，如何避免冲突" class="headerlink" title="4.引出问题：商户和商品信息都存入redis，用户id是1，商品id也是1，如何避免冲突"></a>4.引出问题：商户和商品信息都存入redis，用户id是1，商品id也是1，如何避免冲突</h6><p>key的层级格式：<br>我的项目名称是zzh,有user和product两种不同类型的数据，我们可以这样定义key:<br>user相关的key：      set zzh:user:1 项目名：业务名：类型：id<br>product相关的key,value     set zzh:product:1  ‘{“id”:1,”name”:”zzh”,”age”:21}’ 冒号相当于.形成zzh.product.1的包层级</p><h6 id="5-Hash类型"><a href="#5-Hash类型" class="headerlink" title="5.Hash类型"></a>5.Hash类型</h6><p>也叫散列，其value是一个无序字典，类似于java中的hashmap结构（有差异)<br>(hset field:  key value)<br>添加字段：<br>示例：hset zzh:user:3 name lucy<br>            hset zzh:user:3 age 21<br>修改age:  hset zzh:user:3 age 17<br>获取字段：hget zzh:user:3 name<br>存入多组：hmset zzh:user:3 name zhangsan age 20 sex man<br>                    hmget zzh:user:3 name age sex 获取第三组的name,age,sex字段<br>获取所有键值对：hgetall zzh:user:3<br>获取所有的keys: hkeys zzh:user:3<br>获取所有的value:hval zzh:user:3<br>hincrby zzh:user:4 age 2  把age字段自增2<br>查询field存在，如果存在就添加：hsetnx zzh:user:3 sex woman</p><h6 id="6-list类型：底层可以和linkedlist类似，可以看作成一个双向链表"><a href="#6-list类型：底层可以和linkedlist类似，可以看作成一个双向链表" class="headerlink" title="6.list类型：底层可以和linkedlist类似，可以看作成一个双向链表"></a>6.list类型：底层可以和linkedlist类似，可以看作成一个双向链表</h6><p>特点：有序，元素可以重复，插入和删除快，查询速度一般<br>需求：保存序列有要求的数据（先后）;</p><p>lrange:返回一段角标范围内的元素，不取出<br>blpop,brpop:和l,rpop差不多，只不过在没有元素时等待指定时间，而不是直接返回nil<br>lpush users 1 2 3     存取结构：先3在2后1<br>rpush users 4 5 6<br>lpop：取出并移除<br>lrange users 1 2 从0开始数<br>blpop和brpop可以开两个虚拟机演示<br>应用：<br>用list模拟一个栈（喝酒吐了）<br>用list模拟一个队列（喝酒拉屎）<br>用list结构模拟一个阻塞队列</p><h6 id="7-set类型（像hashset）"><a href="#7-set类型（像hashset）" class="headerlink" title="7.set类型（像hashset）"></a>7.set类型（像hashset）</h6><p>特点：无序，元素不可重复，查找快，支持交集，并集，差集等功能，社交型命令常用<br>sadd key member插入一个或多个元素  sadd s1 a b c(存的是key)  hashset s1&#x3D;new hashset (),hashset.add(a,b,c)<br>srem key member移除…  srem s1 a<br>scard key:返回Set元素个数… srem s1<br>sismember key member: 判断一个元素是否在set中 sismember s1 b<br>smembers：获取set中的所有元素<br>sinter key1 key2:求key1,key2的交集<br>sdiff key1 key2 差集<br>sunion key1 key2:并集<br>练习:<br>张三的好友有：李四，王五，赵六<br>李四的好友有：王五，麻子，赵六<br>sadd zs lisi wangwu zhaoliu<br>sadd ls wangwu mazi ergou<br>1.计算李四和张三共同好友：sinter zs ls<br>2.查询张三的好友却不是李四的好友： sdiff zs ls<br>3.查询张三李四总共好有：sunion zs ls<br>4.查询张三是否是李四的好友：sismerber ls zhangsan</p><h6 id="8-sortedset可排序的set集合，和treeset有些相似，默认升序排名，从0开始数"><a href="#8-sortedset可排序的set集合，和treeset有些相似，默认升序排名，从0开始数" class="headerlink" title="8.sortedset可排序的set集合，和treeset有些相似，默认升序排名，从0开始数"></a>8.sortedset可排序的set集合，和treeset有些相似，默认升序排名，从0开始数</h6><p>sortset中每一个元素都带有一个score的属性<br>特性：可排序，元素不重复，查询速度快（有跳表和hash表）<br>zadd key score member:添加一个或多个元素 zadd stus 85 jack 89 lucy 82 rose<br>zrem key  member<br>zscore key member:获取元素的score值<br>zrank member:获取指定元素排名<br>zcard key：查询sorted set中的元素个数<br>zcount key min max:统计score值在给定范围内所有元素的个数<br>zincrby key increment member:给一个元素的score加多少分<br>zrangby key min max:按从小到大获取前几名 zrange stus 0 2<br>zrevrange:从大到小<br>zrangebyscore key min max:按分数查值</p><h6 id="9-redis的Java客户端："><a href="#9-redis的Java客户端：" class="headerlink" title="9.redis的Java客户端："></a>9.redis的Java客户端：</h6><p>jedis特点：以redis命令作为方法名称，学习成本低，简单实用，但是jedis实例是线程不安全的，多线程环境下需要基于线程池使用<br>lettuce特点：lettuce是基于netty实现的，支持同步，异步，响应式编程，线程安全，支持redis的哨兵模式，集群模式，管道模式<br>spring整合:springdata redis</p><p>1.jedis快速入门</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;**dependency**&gt;</span><br><span class="line">   &lt;**groupId**&gt;redis.clients&lt;/**groupId**&gt;</span><br><span class="line">   &lt;**artifactId**&gt;jedis&lt;/**artifactId**&gt;</span><br><span class="line">   &lt;**version**&gt;3.7.0&lt;/**version**&gt;</span><br><span class="line"> &lt;/**dependency**&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.建立连接</span></span><br><span class="line">        jedis=<span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.217.132&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.设置密码</span></span><br><span class="line">        jedis.auth(<span class="string">&quot;zzh&quot;</span>);</span><br><span class="line">        <span class="comment">//3.选择库</span></span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zzh&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis!=<span class="literal">null</span>)&#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;21&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.jedis连接池：jedis是线程不安全的，并且频繁创建和销毁会有性能消耗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedispool;<span class="comment">//final一定要给初始值，可以不立马给</span></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//配置连接池</span></span><br><span class="line">        JedisPoolConfig poolConfig=<span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">1000</span>);<span class="comment">//无连接的时候等待1000ms</span></span><br><span class="line">        <span class="comment">//创建连接池对象</span></span><br><span class="line">        jedispool=<span class="keyword">new</span> <span class="title class_">JedisPool</span></span><br><span class="line">                (poolConfig,<span class="string">&quot;192.168.217.132&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;zzh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> jedispool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.SpringDataRedis:默认使用lettuce<br>提供了redisTemplate:封装了各种对redis的操作，并且将不同类型的操作api封装到不同类型中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">连接池：</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.217</span><span class="number">.132</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//可以写入任何对象</span></span><br><span class="line">    <span class="comment">//写入一条String</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zzh&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在客户端得到的却是这个，原因是传入的默认是object对象，默认的序列化器会给jdk序列化器，使用objectOutputStream进行序列化，把java对象转换成字节，在写入到文件中，可读性差，会产生bug，内存占用大</span><br><span class="line">get &quot;\xac\xed\x00\x05t\x00\x04name&quot;</span><br><span class="line">&quot;\xac\xed\x00\x05t\x00\x03zzh&quot;</span><br></pre></td></tr></table></figure><p>4.解决jdk序列化的方式：使用key:StringRedisSerializer方式是getBytes,value:GenericJackson2JsonRedisSerializer</p><p>因为没有引入springmvc，所以我们要自己引入json依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory ConnectionFactory)</span>&#123;</span><br><span class="line">    <span class="comment">//key是string,value是object,connectionFactory会由springboot帮我们创建</span></span><br><span class="line">    <span class="comment">//创建RedisTemplate对象</span></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//设置工厂</span></span><br><span class="line">    template.setConnectionFactory(ConnectionFactory);</span><br><span class="line">    <span class="comment">//设置json序列化工具</span></span><br><span class="line">    <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">    <span class="comment">//设置key序列化</span></span><br><span class="line">    template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">    template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">    <span class="comment">//设置value序列化</span></span><br><span class="line">    template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">    template.setHashKeySerializer(jsonRedisSerializer);</span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//key是String,值是object,如果object是个对象能转换成json</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br></pre></td></tr></table></figure><p>测试保存对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String User;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;大海&quot;</span>,<span class="number">21</span>));</span><br><span class="line">    <span class="type">User</span> <span class="variable">o</span> <span class="operator">=</span>(User)redisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>)</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User(User=大海, age=<span class="number">21</span>)</span><br></pre></td></tr></table></figure><p>小结：key是String,如果object是个对象能转换成json，存set的时候会把user序列化成json,取get的时候会反序列化成对象<br>但是夹带私货”@class”:”com.zzh.redis.pojp.User”</p><p>所以为了节省空间，我们不会使用json序列化器取处理value,统一使用String序列化器，要求只能存储String,当需要存储Java对象的时候需要手动序列化，解决内存占用问题</p><p>5.引出Spring提供的StringRedisTemplate类，他的key和value的序列化方式默认就是String方式，省去了我们自定义RedisTemplate；<br>换人话说，就是把你存入的String真正当成String类型存入<br>这回@Bean<br>public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory ConnectionFactory)这个类就不要了，用spring自带的了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zzh&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//spring默认使用的json工具</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;大海&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">//手动序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//写入数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>,json);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        String jsonUser=stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line">        <span class="comment">//手动反序列化</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：<br>方案一<br>1.自定义RedisTemplate<br>2.修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</p><p>方案二：使用StringRedisTemplate</p><p>1.写入Redis时，手动把对象序列化为JSON<br>2.读取Redis时，手动把读取到的JSON反序列化为对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zzh&quot;</span>);</span><br><span class="line">    stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;entries=&quot;</span>+entries);</span><br><span class="line">&#125;</span><br><span class="line">entries=&#123;name=zzh,age=<span class="number">21</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus（熬夜复习版）</title>
      <link href="/2022/03/20/mybatisplus/"/>
      <url>/2022/03/20/mybatisplus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="mybatis-plus的特点：比mybatis只做增强不做改变-多处是api调用没啥意思"><a href="#mybatis-plus的特点：比mybatis只做增强不做改变-多处是api调用没啥意思" class="headerlink" title="mybatis-plus的特点：比mybatis只做增强不做改变 多处是api调用没啥意思"></a>mybatis-plus的特点：比mybatis只做增强不做改变 多处是api调用没啥意思</h4><p>快捷键扩充：ctrl+p显示参数类型<br>                        ctrl+h显示类的继承关系（右侧大图）</p><p>框架识别过程：先分析实体类，根据实体类的属性，把属性作为数据库的字段进行操作<br>注意事项：这里的多处封装都是根据的是（…by和删除map）where条件进行封装的，希望警示一下，条件控制器是删选大于小于非空啥的会使用</p><h3 id="所有方法都针对逻辑删除"><a href="#所有方法都针对逻辑删除" class="headerlink" title="所有方法都针对逻辑删除"></a>所有方法都针对逻辑删除</h3><h6 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `mybatis_plus` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;</span><br><span class="line">use `mybatis_plus`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">`id` bigint(20) NOT NULL COMMENT &#x27;主键ID&#x27;,#mybatisplus默认是雪花算法生成id,所以需要用bigint</span><br><span class="line">`name` varchar(30) DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`age` int(11) DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">`email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-配置yml文件"><a href="#3-配置yml文件" class="headerlink" title="3.配置yml文件"></a>3.配置yml文件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment">#配置连接数据库的各个信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zzh</span></span><br></pre></td></tr></table></figure><h6 id="4-lombok表达式"><a href="#4-lombok表达式" class="headerlink" title="4.lombok表达式"></a>4.lombok表达式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@NoArgsConstructor 无参构造器</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor 有参构造器</span></span><br><span class="line"><span class="comment">//@Setter set方法</span></span><br><span class="line"><span class="comment">//@Getter get方法</span></span><br><span class="line"><span class="comment">//@EqualsAndHashCode 重写equals和hashcode方法</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//上面所有都包括，无有参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-MapperScan注解的使用"><a href="#5-MapperScan注解的使用" class="headerlink" title="5.@MapperScan注解的使用"></a>5.@MapperScan注解的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.zzh.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="comment">//1.扫描mapper接口所在的包</span></span><br><span class="line"><span class="comment">//2.把实现userMapper的代理类统一交给ioc容器管理</span></span><br></pre></td></tr></table></figure><h6 id="6-快速入门"><a href="#6-快速入门" class="headerlink" title="6.快速入门"></a>6.快速入门</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义userMapper继承BaseMapper&lt;User&gt;,注意泛型</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.直接使用，无需编写语句</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//selectList()根据MP内置的条件构造器查询一个list集合，null表示没有条件，即查询所有</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="7-深度剖析原理（反射）"><a href="#7-深度剖析原理（反射）" class="headerlink" title="7.深度剖析原理（反射）"></a>7.深度剖析原理（反射）</h6><p>日志打印信息：SELECT id,name,age,email FROM user<br>需要注意的是实体类的属性名和表的属性名一致（区分大小写），POJO（domain）名字和表名一致（不区分大小写）<br>先抽取实体，在抽取属性，生成对应的sql语句，在注入到mybatis容器当中</p><h6 id="8-配置日志"><a href="#8-配置日志" class="headerlink" title="8.配置日志"></a>8.配置日志</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h6 id="9-CRUD"><a href="#9-CRUD" class="headerlink" title="9.CRUD"></a>9.CRUD</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )</span></span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangsa@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br><span class="line">    System.out.println(user.getId());<span class="comment">//生成的id是雪花算法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="comment">//根据id删</span></span><br><span class="line"><span class="comment">//DELETE FROM user WHERE id=?</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">0</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"><span class="comment">//根据map删（条件）</span></span><br><span class="line"><span class="comment">//DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    </span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);<span class="comment">//name=&#x27;zhangsan&#x27;</span></span><br><span class="line">map.put(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>);<span class="comment">//age=23</span></span><br><span class="line">userMapper.deleteByMap(map);</span><br><span class="line"><span class="comment">//多个id批量删除</span></span><br><span class="line"><span class="comment">//DELETE FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">List&lt;Long&gt; result = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);<span class="comment">//把数组转换成集合</span></span><br><span class="line">userMapper.deleteBatchIds(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//改（根据id改）</span></span><br><span class="line"><span class="comment">//UPDATE user SET name=?, email=? WHERE id=?</span></span><br><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">4L</span>);</span><br><span class="line">user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;lisi@qq.com&quot;</span>);</span><br><span class="line">userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询功能</span></span><br><span class="line"><span class="comment">//1.根据id查询用户信息</span></span><br><span class="line"><span class="comment">//SELECT id,name,age,email FROM user WHERE id=?</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">//2.批量查询</span></span><br><span class="line"><span class="comment">//SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">List&lt;Long&gt; result = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectBatchIds(result);</span><br><span class="line">System.out.println(users);</span><br><span class="line"><span class="comment">//3.根据map条件来查</span></span><br><span class="line">SELECT id,name,age,email FROM user <span class="type">WHERE</span> <span class="variable">name</span> <span class="operator">=</span> ? <span class="type">AND</span> <span class="variable">age</span> <span class="operator">=</span> ?</span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">System.out.println(users);</span><br><span class="line"><span class="comment">//4.查询所有（条件不写）</span></span><br><span class="line"><span class="comment">//SELECT id,name,age,email FROM user</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">      System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="10-如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）"><a href="#10-如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）" class="headerlink" title="10.如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）"></a>10.如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yml:mapper-locations: 指定xml文件目录，不写默认是resource/mapper</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.zzh.mybatisplus.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectMapById&quot;</span> resultType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">        select id,name,age,email from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义：根据用户信息为map集合</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectMapById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//select id,name,age,email from user where id=?</span></span><br><span class="line">Map&lt;String, Object&gt; map = userMapper.selectMapById(<span class="number">1l</span>);<span class="comment">//key是列名，value是列值</span></span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><h6 id="11-mybatisplus不仅可以提供mapper-还可以提供service的方法-Iservice"><a href="#11-mybatisplus不仅可以提供mapper-还可以提供service的方法-Iservice" class="headerlink" title="11.mybatisplus不仅可以提供mapper,还可以提供service的方法(Iservice)"></a>11.mybatisplus不仅可以提供mapper,还可以提供service的方法(Iservice)</h6><p>1）为了避免和mapper混淆，get:查询单行，remove删除，list查询集合，save添加，saveOrUpdate添加或修改，page分页等<strong>前缀命名方式</strong><br>2）如果存在自定义通用service方法，请创建自己的iBaseService继承Mybatis-plus提供的基类，Iservice是接口，serviceImpl是实现类<br>3）对象Wrapper为条件构造器<br>4）saveOrUpdate，如果有id就是添加，如果没有id就是修改</p><p>注意：不介意直接使用serviceImpl，因为自己的业务往往比较复杂</p><h6 id="12-service方法的使用"><a href="#12-service方法的使用" class="headerlink" title="12.service方法的使用"></a>12.service方法的使用</h6><p>细节：<br>1）Iservice和ServiceImpl是框架自带的 ServiceImpl继承Iservice接口<br>2）如果想实现UserService接口，需要实现它的方法，此时继承ServiceImpl就无需重写方法<br>3）ServiceImpl接收的泛型参数是&lt;mapper，Pojo&gt;<br>4）我们可以使用iservice提供的功能，也能使用自定义的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询总条数</span></span><br><span class="line"><span class="comment">//select count(*) from user</span></span><br><span class="line"><span class="type">long</span> count=userService.count();</span><br><span class="line">System.out.println(<span class="string">&quot;总记录数&quot;</span>+count);<span class="comment">//相当于count*</span></span><br><span class="line"><span class="comment">//批量添加（mapper的方法只能添加一条）</span></span><br><span class="line"><span class="comment">//相当于循环添加，语句是：INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? )执行了10次</span></span><br><span class="line">List&lt;User&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;zzh&quot;</span>+i);</span><br><span class="line">    user.setAge(<span class="number">20</span>+i);</span><br><span class="line">    list.add(user);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(list);<span class="comment">//批量添加</span></span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h6 id="13-问题引出-TableName和-TableId注解（比如user实体类和表t-user不一样的时候）"><a href="#13-问题引出-TableName和-TableId注解（比如user实体类和表t-user不一样的时候）" class="headerlink" title="13.问题引出@TableName和@TableId注解（比如user实体类和表t_user不一样的时候）"></a>13.问题引出@TableName和@TableId注解（比如user实体类和表t_user不一样的时候）</h6><p>解决方法：<br>1.在实体类(pojo)上加注解@TableName(“t_user”)<br>2.如果所有实体类都有一个指定前缀比如t_，此时可以考虑全局配置,有点像spring prefix</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global-config:</span></span><br><span class="line">  <span class="attr">db-config:</span></span><br><span class="line">    <span class="string">table-prefix:t_</span></span><br></pre></td></tr></table></figure><h6 id="14-mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略-tableId"><a href="#14-mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略-tableId" class="headerlink" title="14.mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略@tableId"></a>14.mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略@tableId</h6><p>解决方法：@tableid加在属性上，将属性所对应的字段指定为主键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId</span></span><br><span class="line"><span class="keyword">private</span> Long uid;</span><br><span class="line">假如实体类是id,表里的主键字段是uid</span><br><span class="line"></span><br><span class="line"><span class="meta">@tableId</span>注解的value属性用于指定主键的字段    </span><br><span class="line"><span class="meta">@TableId(value=&quot;uid&quot;)</span><span class="comment">//value不写也行</span></span><br><span class="line"><span class="keyword">private</span> Long uid</span><br></pre></td></tr></table></figure><h6 id="15-设置主键生成策略"><a href="#15-设置主键生成策略" class="headerlink" title="15.设置主键生成策略"></a>15.设置主键生成策略</h6><p>设置自动递增<br>1.说明，如果数据库设置成递增而mybatisplus使用的是雪花算法时默认是雪花算法<br>设置自动递增前要先保证数据库的主键自动递增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(value=&quot;uid&quot;，type=IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Long uid</span><br></pre></td></tr></table></figure><p>设置全局自增策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment">#配置mybatis-plus的全局配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto#全局自增</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="16-雪花算法"><a href="#16-雪花算法" class="headerlink" title="16.雪花算法"></a>16.雪花算法</h6><p>主从复制：主服务器实现写的功能，从服务器实现读的功能，各施其职，读写分离<br>单表拆分两种方式：垂直分表和水平分表</p><p>雪花算法：分布式算法，能保证不同的表的主键的不重复性，以及相同表的主键的有序性（随着时间推移，后面生成的数永远比前面大）</p><h6 id="17-处理其他字段和实体属性不一样的情况（-TableField）"><a href="#17-处理其他字段和实体属性不一样的情况（-TableField）" class="headerlink" title="17.处理其他字段和实体属性不一样的情况（@TableField）"></a>17.处理其他字段和实体属性不一样的情况（@TableField）</h6><p>情况一：mybatisplus框架自动可以将表中的下划线命名user_name转换为驼峰命名userName<br>情况二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Tablefield(&quot;user_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long name</span><br></pre></td></tr></table></figure><h6 id="18-逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除"><a href="#18-逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除" class="headerlink" title="18:逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除"></a>18:逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除</h6><p>说明：此种删除本质是修改，此时用户查询数据看不到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeleted;<span class="comment">//添加注解后执行的delete语句都是逻辑删除</span></span><br></pre></td></tr></table></figure><h6 id="19-条件构造器Wrapper"><a href="#19-条件构造器Wrapper" class="headerlink" title="19.条件构造器Wrapper"></a>19.条件构造器Wrapper</h6><p>Wrapper ： 条件构造抽象类，最顶端父类<br> AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<br> QueryWrapper ： 查询条件封装<br>UpdateWrapper ： Update 条件封装<br>AbstractLambdaWrapper ： 使用Lambda 语法<br>LambdaQueryWrapper ：用于Lambda语法使用的查询<br>Wrapper LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用链式表达式</span></span><br><span class="line"><span class="comment">//QueryWrapper指定实体类的泛型,查询用户名包含a,年龄在20-30之间，邮箱信息不为null的用户信息</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (user_name LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//ge&gt;=   le&lt;=</span></span><br><span class="line">queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>)<span class="comment">//user_name与数据库字段名相同</span></span><br><span class="line">         .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">         .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="20-组装排序条件"><a href="#20-组装排序条件" class="headerlink" title="20.组装排序条件"></a>20.组装排序条件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户信息，先按年龄降序排序，若年龄相同，则按照id升序排序</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper = queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">        .orderByAsc(<span class="string">&quot;uid&quot;</span>);<span class="comment">//是表中的字段名</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><h6 id="21-组装删除条件（仍然用的是queryWrapper）"><a href="#21-组装删除条件（仍然用的是queryWrapper）" class="headerlink" title="21.组装删除条件（仍然用的是queryWrapper）"></a>21.组装删除条件（仍然用的是queryWrapper）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除邮箱是null的信息 因为添加了逻辑删除，实际是修改</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br></pre></td></tr></table></figure><h6 id="22-实现修改功能"><a href="#22-实现修改功能" class="headerlink" title="22.实现修改功能"></a>22.实现修改功能</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line"><span class="comment">//UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND age &gt; ? OR</span></span><br><span class="line"><span class="comment">// email IS NULL)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//默认情况是and</span></span><br><span class="line">queryWrapper</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">        .or()</span><br><span class="line">        .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();<span class="comment">//要修改的字段的属性值放进去.封装进行修改</span></span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h6 id="23-条件的优先级"><a href="#23-条件的优先级" class="headerlink" title="23.条件的优先级"></a>23.条件的优先级</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户名中含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line"><span class="comment">//lambda中的条件优先执行,消费者模式consumer</span></span><br><span class="line"><span class="comment">//UPDATE t_user SET user_name=?, email=? WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NULL))</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)<span class="comment">//此处使用and()+lambda可以优先执行，or()也有此种用法</span></span><br><span class="line">                .or()</span><br><span class="line">                .isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUser_name(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;test@zzh.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">System.out.println(update);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="24-查询功能，仅仅查询某一些字段"><a href="#24-查询功能，仅仅查询某一些字段" class="headerlink" title="24.查询功能，仅仅查询某一些字段"></a>24.查询功能，仅仅查询某一些字段</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户信息的username和age和邮箱字段</span></span><br><span class="line"><span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.select(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;age&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : maps) &#123;<span class="comment">//此map是返回值</span></span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">&#123;user_name=Jone, age=<span class="number">18</span>, email=test1<span class="meta">@baomidou</span>.com&#125;</span><br><span class="line">&#123;user_name=Jack, age=<span class="number">20</span>, email=test2<span class="meta">@baomidou</span>.com&#125;</span><br><span class="line">&#123;user_name=小黑, age=<span class="number">28</span>, email=<span class="number">123456</span><span class="meta">@qq</span>.com&#125;</span><br></pre></td></tr></table></figure><h6 id="25-组装子查询"><a href="#25-组装子查询" class="headerlink" title="25.组装子查询"></a>25.组装子查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询id小于等于100的用户信息</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (id IN (select id from t_user where id &lt;=100))</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from t_user where id &lt;=100&quot;</span>);<span class="comment">//前一个id代表要判断的条件</span></span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="26-updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null"><a href="#26-updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null" class="headerlink" title="26.updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null"></a>26.updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UPDATE t_user SET user_name=?,email=? WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NOT NULL))</span></span><br><span class="line">UpdateWrapper&lt;User&gt; userUpdateWrapper=<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userUpdateWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">UpdateWrapper&lt;User&gt; result = userUpdateWrapper.set(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;小黑&quot;</span>).set(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;123456@qq.com&quot;</span>);</span><br><span class="line">userMapper.update(<span class="literal">null</span>,userUpdateWrapper);<span class="comment">//不用设置实体类对象了</span></span><br><span class="line">System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br></pre></td></tr></table></figure><h6 id="27-模拟用户前台发送多个条件的校验"><a href="#27-模拟用户前台发送多个条件的校验" class="headerlink" title="27.模拟用户前台发送多个条件的校验"></a>27.模拟用户前台发送多个条件的校验</h6><p>1.困难写法，此时为空串，只有20&lt;年龄&lt;30成立</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (age &gt;= ? AND age &lt;= ?)</span></span><br><span class="line">String username=<span class="string">&quot;&quot;</span>;</span><br><span class="line">Integer ageBegin=<span class="number">20</span>;</span><br><span class="line">Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(username))&#123;</span><br><span class="line">    <span class="comment">//StringUtils是mp提供的，判断字符是否不为空串，不为null,不为空白符</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ageBegin!=<span class="literal">null</span>)&#123;</span><br><span class="line">    queryWrapper.ge(<span class="string">&quot;age&quot;</span>,ageBegin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ageEnd!=<span class="literal">null</span>)&#123;</span><br><span class="line">    queryWrapper.le(<span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.简单写法，condition组装条件，符合条件就拼装，不复合就不拼装，<strong>其实就是底层封装了if</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String username=<span class="string">&quot;&quot;</span>;</span><br><span class="line">Integer ageBegin=<span class="number">20</span>;</span><br><span class="line">Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.like(StringUtils.isNotBlank(username),<span class="string">&quot;user_name&quot;</span>,username)</span><br><span class="line">        .ge(ageBegin!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageBegin)</span><br><span class="line">        .le(ageEnd!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageEnd);</span><br></pre></td></tr></table></figure><h6 id="28-lambdaQueryWrapper的使用"><a href="#28-lambdaQueryWrapper的使用" class="headerlink" title="28.lambdaQueryWrapper的使用"></a>28.lambdaQueryWrapper的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义查询条件，有可能为null（用户未输入）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//避免使用字符串表示字段，防止运行时错误</span></span><br><span class="line">queryWrapper</span><br><span class="line">.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">.ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">.le(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="29-LambdaUpdateWrapper的使用"><a href="#29-LambdaUpdateWrapper的使用" class="headerlink" title="29.LambdaUpdateWrapper的使用"></a>29.LambdaUpdateWrapper的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">updateWrapper</span><br><span class="line">.set(User::getAge, <span class="number">18</span>)</span><br><span class="line">.set(User::getEmail, <span class="string">&quot;userzzh.com&quot;</span>)</span><br><span class="line">.like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">.and(i -&gt; i.lt(User::getAge, <span class="number">24</span>).or().isNull(User::getEmail)); <span class="comment">//lambda</span></span><br><span class="line">表达式内的逻辑优先运算</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h6 id="30-分页插件"><a href="#30-分页插件" class="headerlink" title="30.分页插件"></a>30.分页插件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.zzh.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//先进行查询，在查询的基础上进行拦截</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//配置分页插件</span></span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 LIMIT ? 一个问号代表第一页显示几条数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusPluginsTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;User&gt; page= <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//limit复习,limit（当前页页码，条数），总条数：当前页码-1*条数</span></span><br><span class="line">        <span class="comment">//null代表不带有条件</span></span><br><span class="line">        Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(userPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="31-自定义分页插件"><a href="#31-自定义分页插件" class="headerlink" title="31.自定义分页插件"></a>31.自定义分页插件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">#配置类型别名所对应的包</span></span><br><span class="line"><span class="attr">type-aliases-package:</span> <span class="string">com.zzh.mybatisplus.pojo</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过年龄查询用户信息并分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page Mybatis-plus所提供的分页对象，必须位于第一个参数位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;selectPageVo&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">    select id,user_name,age,email from t_user where age&gt; #&#123;age&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">Page&lt;User&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">userMapper.selectPageVo(page,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h6 id="32-乐观锁和悲观锁："><a href="#32-乐观锁和悲观锁：" class="headerlink" title="32.乐观锁和悲观锁："></a>32.乐观锁和悲观锁：</h6><p>悲观锁：令狐冲操作的时候，岳不群一直在阻塞状态<br>乐观锁（version）：如果版本匹配不上，放弃修改</p><h6 id="33-模拟乐观锁冲突"><a href="#33-模拟乐观锁冲突" class="headerlink" title="33.模拟乐观锁冲突"></a>33.模拟乐观锁冲突</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小李和小王同时查询</span></span><br><span class="line"><span class="comment">//1、小李</span></span><br><span class="line">BaseMapper&lt;Object&gt; productMapper;</span><br><span class="line"><span class="type">Product</span> <span class="variable">p1</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小李取出的价格：&quot;</span> + p1.getPrice());</span><br><span class="line"><span class="comment">//2、小王</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p2</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小王取出的价格：&quot;</span> + p2.getPrice());</span><br><span class="line"><span class="comment">//3、小李将价格加了50元，存入了数据库</span></span><br><span class="line">p1.setPrice(p1.getPrice() + <span class="number">50</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> productMapper.updateById(p1);</span><br><span class="line">System.out.println(<span class="string">&quot;小李修改结果：&quot;</span> + result1);</span><br><span class="line"><span class="comment">//4、小王将商品减了30元，存入了数据库</span></span><br><span class="line">p2.setPrice(p2.getPrice() - <span class="number">30</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> productMapper.updateById(p2);</span><br><span class="line">System.out.println(<span class="string">&quot;小王修改结果：&quot;</span> + result2);</span><br><span class="line"><span class="comment">//最后的结果</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p3</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">//价格覆盖，最后的结果：70</span></span><br><span class="line">System.out.println(<span class="string">&quot;最后的结果：&quot;</span> + p3.getPrice());</span><br></pre></td></tr></table></figure><h6 id="34-乐观锁的实现"><a href="#34-乐观锁的实现" class="headerlink" title="34.乐观锁的实现"></a>34.乐观锁的实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span><span class="comment">//标识乐观锁版本号</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置分页插件</span></span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//配置乐观锁插件</span></span><br><span class="line">interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line"></span><br><span class="line">实现后执行以上代码，结果是<span class="number">150</span>，版本号+<span class="number">1</span>，因为小李和小王是同时获取的，所以小王获取的是<span class="number">0</span>，和<span class="number">1</span>版本匹配不上，修改不了，所以还是<span class="number">150</span></span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小李和小王同时查询</span></span><br><span class="line"><span class="comment">//1、小李</span></span><br><span class="line">BaseMapper&lt;Object&gt; productMapper;</span><br><span class="line"><span class="type">Product</span> <span class="variable">p1</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小李取出的价格：&quot;</span> + p1.getPrice());</span><br><span class="line"><span class="comment">//2、小王</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p2</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小王取出的价格：&quot;</span> + p2.getPrice());</span><br><span class="line"><span class="comment">//3、小李将价格加了50元，存入了数据库</span></span><br><span class="line">p1.setPrice(p1.getPrice() + <span class="number">50</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> productMapper.updateById(p1);</span><br><span class="line">System.out.println(<span class="string">&quot;小李修改结果：&quot;</span> + result1);</span><br><span class="line"><span class="comment">//4、小王将商品减了30元，存入了数据库</span></span><br><span class="line">p2.setPrice(p2.getPrice() - <span class="number">30</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> productMapper.updateById(p2);<span class="comment">//0代表操作失败</span></span><br><span class="line">System.out.println(<span class="string">&quot;小王修改结果：&quot;</span> + result2);</span><br><span class="line"><span class="keyword">if</span>(result2 == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//失败重试，重新获取version并更新</span></span><br><span class="line">p2 = productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">p2.setPrice(p2.getPrice() - <span class="number">30</span>);</span><br><span class="line">result2 = productMapper.updateById(p2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;小王修改重试的结果：&quot;</span> + result2);</span><br><span class="line"><span class="comment">//最后的结果</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p3</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">//价格覆盖，最后的结果：70</span></span><br><span class="line">System.out.println(<span class="string">&quot;最后的结果：&quot;</span> + p3.getPrice());</span><br></pre></td></tr></table></figure><h6 id="35-通用枚举：添加的时候，性别字段0-1，属性字段枚举的情况"><a href="#35-通用枚举：添加的时候，性别字段0-1，属性字段枚举的情况" class="headerlink" title="35.通用枚举：添加的时候，性别字段0,1，属性字段枚举的情况"></a>35.通用枚举：添加的时候，性别字段0,1，属性字段枚举的情况</h6><p>扫描枚举，把枚举中指定的值传入到数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#扫描通用枚举</span></span><br><span class="line"><span class="attr">type-enums-package:</span> <span class="string">com.zzh.enums</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">        MALE(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),FEMALE(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> Integer sex;</span><br><span class="line">        <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnumValue</span><span class="comment">//将注解所表示的属性值存储到数据库中</span></span><br><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure><p>这样传入sex的就是1</p><h6 id="36-多数据源"><a href="#36-多数据源" class="headerlink" title="36.多数据源"></a>36.多数据源</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line"><span class="attr">dynamic:</span></span><br><span class="line"><span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line"><span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line"><span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line"><span class="attr">master:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">zzh</span></span><br><span class="line"><span class="attr">slave_1:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">zzh</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">引入依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//指定所操作的数据源</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span></span><br><span class="line"><span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductMapper, Product&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductService productService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(userService.getById(<span class="number">1L</span>));</span><br><span class="line">System.out.println(productService.getById(<span class="number">1L</span>));&#125;</span><br></pre></td></tr></table></figure><h6 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h6><p>虽然mybatisplus pojo的驼峰命名能自动匹配表中的下划线命名，但是自定义写的业务中，mapper里面还是要定义resultMap</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx（反向代理版）</title>
      <link href="/2022/03/20/nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/20/nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>为了解决跨域问题：当一个请求url的协议，域名，端口三者之间任意一个与当前页面url不同即为跨域<br>比如前端用的是8080端口，后端用的是8081端口，前端要访问后端接口的化，就会产生跨域问题，因为两个端口不一样<br>1.主要了解基础概念和用途，配置是重点，详情配置参考官方文档<br>2.高可用偏向运维方向，可以跳过，知道结合keepalived来试先nginx高可用即可<br>3.原理方面做简单了解</p><p>形象比喻：好比取餐厅吃饭，nginx相当于服务员，tomcat相当于厨师，你要一瓶饮料（相当于静态资源），服务员就能给你拿，而你要一盘鱼香肉丝（动态资源），那只好服务员只好和厨师讲，让他做<br>把nginx理解为皮包公司（中介）只管发请求给他，然后它找谁一概不关心</p><h6 id="nginx简介："><a href="#nginx简介：" class="headerlink" title="nginx简介："></a>nginx简介：</h6><p>1.什么是nginx:能承受高并发，高性能的http,反向单例的服务器，为性能优化而开发<br>2.正向代理：客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问（用户）<br>3.反向代理：比如我想访问8080端口，不暴露，只暴露我的代理服务器的端口8001，然后通过代理服务器给8080端口发请求<br>我的理解：正向代理：帮客户端发送请求，反向代理，帮服务端发送请求，正向隐藏客户端，反向隐藏服务端<br>4.负载均衡：增加服务器数量，然后讲请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是负载均衡<br>5.动静分离：为了加快网站的解析速度，静态资源和动态资源分开部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which nginx</span><br><span class="line">/usr/sbin/nginx</span><br><span class="line">find</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="nginx操作常用命令："><a href="#nginx操作常用命令：" class="headerlink" title="nginx操作常用命令："></a>nginx操作常用命令：</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">关闭：</span><br><span class="line">./nginx -s stop</span><br><span class="line">启动：</span><br><span class="line">./nginx</span><br><span class="line">重加载：(改变配置不会生效)</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h6 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /src/nginx-1.21.6/conf  nginx.conf就是配置文件</span><br><span class="line">nginx由三个部分：全局块，event块，http块</span><br><span class="line">全局块：从开始到events块的内容</span><br><span class="line">比如worker_processes  1;代表可以处理1个并发，此值越大，处理并发数量越多</span><br><span class="line">events块：主要影响nginx服务器与用户的网络连接</span><br><span class="line">worker_connections  1024; 支持最大连接数</span><br><span class="line">http块：nginx服务器配置嘴频繁的一个块</span><br><span class="line">http块也可以包括http全局块，server块</span><br></pre></td></tr></table></figure><h6 id="nginx配置实例-反向代理"><a href="#nginx配置实例-反向代理" class="headerlink" title="nginx配置实例-反向代理"></a>nginx配置实例-反向代理</h6><p>实现效果：<br>(1):打开浏览器，在浏览器地址栏输入<a href="http://www.123.com,跳转到linux系统tomcat的主页面/">www.123.com，跳转到linux系统tomcat的主页面</a><br>(2):准备工作<br>1.在linux系统安装tomcat,默认端口8080<br>2.启动tomcat [root@zzhEdu01 bin]# .&#x2F;startup.sh<br>3.对外开放访问端口 firewall-cmd –add-port&#x3D;8080&#x2F;tcp –permanent<br>firewall-cmd –reload<br>firewall-cmd –list-all<br>场景：windows浏览器——&gt;访问<a href="http://www.zzh.com-------&gt;nginx192.168.217.132:80---------------&gt;127.0.0.1:8080">www.zzh.com-------&gt;nginx192.168.217.132:80---------------&gt;127.0.0.1:8080</a><br>首先要配置域名映射：找到host文件进行配置域名映射的ip地址：<a href="http://www.zzh.com(192.168.217.132:80)">www.zzh.com(192.168.217.132:80)</a><br>第二步：在nginx进行请求转发的配置（反向代理），修改</p><p>server {<br>        listen       80;<br>        server_name  localhost;</p><p>——————–&gt;</p><p>server {<br>        listen       80;<br>        server_name  192.168.217.132;<br>———————-&gt;</p><p>  location &#x2F; {<br>            root   html;<br>            index  index.html index.htm;<br>        }</p><p>————————&gt;<br>  location &#x2F; {<br>            root   html;<br>            proxy_pass <a href="http://192.168.217.132:8080：">http://192.168.217.132:8080：</a><br>            index  index.html index.htm;<br>       }</p><p>第三步：启动tomcat<br>.&#x2F;startup.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">踩坑：反向代理后访问nginx一直是欢迎页面解决方法</span><br><span class="line">whereis nginx</span><br><span class="line"> /etc/nginx nginx.conf</span><br><span class="line">vim nginx.conf</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       [::]:80;</span><br><span class="line">        server_name  192.168.217.132;//配置成域名www.123.com</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location /&#123;</span><br><span class="line">         root    html;</span><br><span class="line">        proxy_pass http://192.168.217.132:8080;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//取消防火墙的开放</span><br><span class="line">firewall-cmd --remove-port=8082/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">此后就不能直接访问:192.168.217.132:8080，只能通过192.168.217.132访问tomcat</span><br></pre></td></tr></table></figure><p>反向代理实例二：<br>效果：访问<a href="http://192.168.217.132:9001/edu%E8%B7%B3%E8%BD%AC%E5%88%B0192.168.217.132:8080,%E8%AE%BF%E9%97%AEhttp://192.168.217.132:9001/vod%E8%B7%B3%E8%BD%AC%E5%88%B0192.168.217.132:8081">http://192.168.217.132:9001/edu跳转到192.168.217.132:8080,访问http://192.168.217.132:9001/vod跳转到192.168.217.132:8081</a></p><p>(1)准备两个tomcat服务器，一个8080，一个8081<br>(2)在两个tomcat的 webapp下分别创建a.html(写8080)，b.html(写8081)<br>(3)具体配置，找到nginx.conf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen       [::]:80;</span><br><span class="line">    server_name  192.168.217.132;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">include /etc/nginx/default.d/*.conf;</span><br><span class="line">location ~/edu/&#123;</span><br><span class="line"> root    html;</span><br><span class="line">proxy_pass http://192.168.217.132:8080;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location ~/vod/&#123;</span><br><span class="line"> root    html;</span><br><span class="line">proxy_pass http://192.168.217.132:8081;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">开放端口</span><br></pre></td></tr></table></figure><p>配置负载均衡：<br>通过浏览器地址栏输入地址访问某个页面，负载均衡，平均分配到8080,8081<br>1.准备两台tomcat,8080,8081<br>2.在两个tomcat的 webapp下分别创建&#x2F;edu&#x2F;a.html(8080,8081)<br>3.进行负载均衡的配置<br>在http块中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">默认轮询策略：每个请求按时间顺序注意分配到不同的后端服务器，若后端服务器down掉，能自动剔除</span><br><span class="line">weight权重策略：默认是1，权重越高，分配的客户端越多用于客户端服务性能不均</span><br><span class="line">ip_hash:按照访问ip的hash结果分配，这样每个访问固定访问一个后端服务器，解决session问题，第一次访问到8081，以后地址不变就一直是8081</span><br><span class="line">fair:按后端服务器的响应时间来分配请求，响应时间短先访问</span><br><span class="line">upstream myserver&#123;</span><br><span class="line">   # 这个是tomcat的访问路径</span><br><span class="line">   server 192.168.217.132:8080;</span><br><span class="line">   server 192.168.217.132:8081;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.217.132;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">proxy_pass http://myserver;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="动静分离：前端配置的，了解一下就完了"><a href="#动静分离：前端配置的，了解一下就完了" class="headerlink" title="动静分离：前端配置的，了解一下就完了"></a>动静分离：前端配置的，了解一下就完了</h6><p>静态请求转发到静态资源服务器，动态请求发给tomcat，另一种方法是动态文件和静态文件混合发布，通过nginx分开</p><p>说人话就是：访问静态资源（html等），不用把请求发给tomcat</p><h6 id="高可用：了解，偏运维"><a href="#高可用：了解，偏运维" class="headerlink" title="高可用：了解，偏运维"></a>高可用：了解，偏运维</h6>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(不愿面对版)</title>
      <link href="/2022/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h6 id="栈的浅入浅出（递归也是栈的一种）"><a href="#栈的浅入浅出（递归也是栈的一种）" class="headerlink" title="栈的浅入浅出（递归也是栈的一种）"></a>栈的浅入浅出（递归也是栈的一种）</h6><p>1）栈的实现：喝酒，喝多了，从嘴里吐出来：后进先出，枪放子弹,发射<br>2）插入数据：压栈（push），取出数据：出栈(pop)，都是对栈顶操作，允许入栈出栈<br>3）动态栈：用链表实现的栈，元素和元素之间物理存储可以不连续<br>4）静态栈：数组<br>5）top:指向第一个数据的时候是0，指向栈顶元素是maxsize-1</p><h6 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2.栈的实现"></a>2.栈的实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStack</span> &#123;</span><br><span class="line">    <span class="comment">//栈的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxStack;</span><br><span class="line">    <span class="comment">//用数组模拟栈,数组从0开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack;</span><br><span class="line">    <span class="comment">//表示栈顶所在位置，默认情况下没有数据，使用-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> top=-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> maxStack)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxStack = maxStack;</span><br><span class="line">        stack=<span class="keyword">new</span> <span class="title class_">int</span>[maxStack];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.top==maxStack-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为空栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.top== -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//压栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;此栈已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        stack[top]=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//弹栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果栈是空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;此栈为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> value=stack[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看栈中所有元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//是否是空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历所有元素&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stack.length; i++) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;   &quot;</span>+stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//栈的中元素的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.top+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-栈的回文数据与调用"><a href="#3-栈的回文数据与调用" class="headerlink" title="3.栈的回文数据与调用"></a>3.栈的回文数据与调用</h6><p>踩坑：栈的元素个数和栈的大小表示不一样，元素个数不应该用栈的大小来做衡量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testApp</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回文数据 aba racecar</span></span><br><span class="line"><span class="comment">     * 需求，通过上面以数组模拟栈来判断一个字符串是否是一个回文数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">detecation</span><span class="params">(String val)</span>&#123;</span><br><span class="line">        ArrayStack arrayStack=<span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="type">int</span> length=val.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//字符串-&gt;字符.添加到栈中</span></span><br><span class="line">            arrayStack.push(val.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder newVal=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> arrayStack.length();<span class="comment">//注意一定要提取出来,否则长度会一直减1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length1; i++) &#123;</span><br><span class="line">            <span class="comment">//是否是空栈</span></span><br><span class="line">            <span class="keyword">if</span>(!arrayStack.isEmpty())&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">pop</span> <span class="operator">=</span> (<span class="type">char</span>)arrayStack.pop();</span><br><span class="line">                newVal.append(pop);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val.equals(newVal))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-使用栈完成一个表达式计算结果：-String-val-x3D-”4-3-2-1-5”结果"><a href="#4-使用栈完成一个表达式计算结果：-String-val-x3D-”4-3-2-1-5”结果" class="headerlink" title="4.使用栈完成一个表达式计算结果： String val&#x3D;”4+3+2+1*5”结果"></a>4.使用栈完成一个表达式计算结果： String val&#x3D;”4+3+2+1*5”结果</h6><p><strong>提示：此种方法有一些小bug（如两个连续的-），只需有思想即可</strong></p><p><strong>思路分析</strong>：定义两个栈，一个字符栈，一个数字栈，遍历，数字进入数字栈，符号进入符号栈<br>如果符号栈是空，则直接入栈，如果符号栈不为空，先对比栈中符号的优先级，如果优先级小于等于栈中的符号，则需要先计算原来数字栈中的数据，将得到的结果再次入栈，再把符号入符号栈，如果符号大于原来的符号栈中的符号，则直接将符号入栈即可，最终获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;4+33+2*3-1&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//数字1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//数字2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">symbolChar</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//符号</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//结果</span></span><br><span class="line">    <span class="comment">//运算符比较：新进来的运算符如果小于等于原栈中的运算符，那么原运算符弹出来，也数字栈的数字弹栈运算，</span></span><br><span class="line">    <span class="comment">//运算后的结果重新放入数字栈，新运算符入栈</span></span><br><span class="line">    <span class="comment">//如果新的运算符大于原栈中的运算符，那么新的符号直接入栈</span></span><br><span class="line">    <span class="type">ArrayStack</span> <span class="variable">numStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="type">ArrayStack</span> <span class="variable">symbolStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//获取字符串长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();</span><br><span class="line">    <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//保证多位数数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">        <span class="comment">//判断是否是一个运算符</span></span><br><span class="line">        <span class="keyword">if</span> (symbolStack.isOper(c)) &#123;<span class="comment">//是一个运算符</span></span><br><span class="line">            <span class="comment">//如果不是一个空的符号栈，比较运算符的优先级</span></span><br><span class="line">            <span class="keyword">if</span> (!symbolStack.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//如果传入的优先级小于等于栈顶的优先级，则把栈顶元素弹出先做运算</span></span><br><span class="line">                <span class="keyword">if</span> (symbolStack.priority(c) &lt;= symbolStack.priority(symbolStack.peek())) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 去符号中获取栈顶的符号，去数字栈中获取两个数字</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    temp1 = numStack.pop();</span><br><span class="line">                    temp2 = numStack.pop();</span><br><span class="line">                    symbolChar = symbolStack.pop();</span><br><span class="line">                    result = numStack.calculate(temp1, temp2, symbolChar);</span><br><span class="line">                    <span class="comment">//把运算结果再次放入到数字栈中</span></span><br><span class="line">                    numStack.push(result);</span><br><span class="line">                    <span class="comment">//把符号压入到符号栈中</span></span><br><span class="line">                    symbolStack.push(c);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  <span class="comment">//如果传入符号大于栈顶的优先级，则直接压入符号</span></span><br><span class="line">                    symbolStack.push(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果是空符号栈，将运算符直接压入栈中</span></span><br><span class="line">                symbolStack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//不是一个运算符</span></span><br><span class="line">            <span class="comment">//存在问题33+44获取的都是一个字符,获取第二个字符</span></span><br><span class="line">            values += c;<span class="comment">//字符串拼接,如果后一个数还是数字，则继续拼接</span></span><br><span class="line">            <span class="keyword">if</span> (i == length - <span class="number">1</span>) &#123;<span class="comment">//到最后一个元素</span></span><br><span class="line">                numStack.push(Integer.parseInt(values));<span class="comment">//拼接后转换成数字,直接入栈</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果后面还有数字</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">data</span> <span class="operator">=</span> str.substring(i + <span class="number">1</span>, i + <span class="number">2</span>).charAt(<span class="number">0</span>);<span class="comment">//截取后一个元素符号</span></span><br><span class="line">                <span class="keyword">if</span> (symbolStack.isOper(data)) &#123;<span class="comment">//如果后一个是符号，直接把这个数直接压入栈</span></span><br><span class="line">                    numStack.push(Integer.parseInt(values));</span><br><span class="line">                    values = <span class="string">&quot;&quot;</span>;<span class="comment">//字符串一定要清空</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;<span class="comment">//整合到最后，便可以弹出计算</span></span><br><span class="line">        <span class="keyword">if</span> (symbolStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp1 = numStack.pop();</span><br><span class="line">        temp2 = numStack.pop();</span><br><span class="line">        symbolChar = symbolStack.pop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">calculate</span> <span class="operator">=</span> numStack.calculate(temp1, temp2, symbolChar);</span><br><span class="line">        numStack.push(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=numStack.pop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**此为补充调用*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是一个运算符</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOper</span><span class="params">(<span class="type">char</span> v)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v==<span class="string">&#x27;+&#x27;</span>||v==<span class="string">&#x27;-&#x27;</span>||v==<span class="string">&#x27;*&#x27;</span>||v==<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断运算符的优先级，使用数字表示优先级的大小，数字越大优先级越大</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">priority</span><span class="params">(<span class="type">int</span> oper)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oper==<span class="string">&#x27;*&#x27;</span>||oper==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(oper==<span class="string">&#x27;+&#x27;</span>||oper==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取栈的容量</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">stackLength</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指向栈顶</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack[top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算两个数进行运算后的结果  2+3  3:num1,2:num2</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2,<span class="type">int</span> oper)</span>&#123;</span><br><span class="line">    <span class="comment">//计算结果</span></span><br><span class="line">    <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            result=num1+num2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            result=num2-num1;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            result=num1*num2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            result=num2/num1;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="链表的介绍：非连续，非顺序，适合添加节点，地址具有跳跃性，在内存中生成"><a href="#链表的介绍：非连续，非顺序，适合添加节点，地址具有跳跃性，在内存中生成" class="headerlink" title="链表的介绍：非连续，非顺序，适合添加节点，地址具有跳跃性，在内存中生成"></a>链表的介绍：非连续，非顺序，适合添加节点，地址具有跳跃性，在内存中生成</h6><h6 id="1-需求：根据带有头部的单链表，实现商品的增删改查，并且也可以针对商品已编号进行排序，完成排行榜"><a href="#1-需求：根据带有头部的单链表，实现商品的增删改查，并且也可以针对商品已编号进行排序，完成排行榜" class="headerlink" title="1.需求：根据带有头部的单链表，实现商品的增删改查，并且也可以针对商品已编号进行排序，完成排行榜"></a>1.需求：根据带有头部的单链表，实现商品的增删改查，并且也可以针对商品已编号进行排序，完成排行榜</h6><p>单链表操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完成各种功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZZHLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//头结点，无具体含义</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">GoodNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoodNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点（在尾端）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(GoodNode goodNode)</span> &#123;</span><br><span class="line">        <span class="type">GoodNode</span> <span class="variable">temp</span> <span class="operator">=</span> node;<span class="comment">//临时节点</span></span><br><span class="line">        <span class="comment">//如果下一个元素为空，则直接break,如果下一个元素不为空，则循环指向下一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = goodNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照商品编号id值从小到大开始添加（data值相互比较）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrder</span><span class="params">(GoodNode goodNode)</span> &#123;</span><br><span class="line">        <span class="type">GoodNode</span> <span class="variable">temp</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//不允许插入重复的数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.id &gt; goodNode.id) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.next.id == goodNode.id) &#123;</span><br><span class="line">                flg = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经存在了该商品,不能添加重复元素&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            goodNode.next = temp.next;</span><br><span class="line">            temp.next = goodNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点（修改name,price）</span></span><br><span class="line">    <span class="comment">//1.先找到链表中的目标节点</span></span><br><span class="line">    <span class="comment">//2.根据新的数据修改</span></span><br><span class="line">    <span class="comment">//3.根据商品的编号进行查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNode</span><span class="params">(GoodNode goodNode)</span> &#123;</span><br><span class="line">        <span class="comment">//如果链表是null</span></span><br><span class="line">        <span class="keyword">if</span> (node.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不为空的情况</span></span><br><span class="line">        <span class="type">GoodNode</span> <span class="variable">temp</span> <span class="operator">=</span> node.next;<span class="comment">//把节点依次赋值</span></span><br><span class="line">        <span class="comment">//标识符：表示找到了节点</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//1.直到链表中的最后一个元素未找到，结束循环</span></span><br><span class="line">            <span class="comment">//2.找到节点，结束</span></span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.id == goodNode.id) &#123;</span><br><span class="line">                flg = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg) &#123;</span><br><span class="line">            temp.name = goodNode.name;</span><br><span class="line">            temp.price = goodNode.price;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在整个链表中未找到节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">GoodNode</span> <span class="variable">temp</span> <span class="operator">=</span> node;<span class="comment">//指向头节点</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//查看是否找到</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.id == id) &#123;<span class="comment">//如果当前节点的下一个id与之匹配</span></span><br><span class="line">                flg = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg) &#123;</span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到删除节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义查看链表中的每一个节点元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空链表&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">GoodNode</span> <span class="variable">temp</span> <span class="operator">=</span> node.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回单链表长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.next==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;空链表&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    GoodNode temp=node.next;</span><br><span class="line">    <span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp=temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="双向链表插入删除修改："><a href="#双向链表插入删除修改：" class="headerlink" title="双向链表插入删除修改："></a>双向链表插入删除修改：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现双向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="comment">//后继节点</span></span><br><span class="line">    <span class="keyword">private</span> BookNode next;</span><br><span class="line">    <span class="comment">//前驱节点</span></span><br><span class="line">    <span class="keyword">private</span> BookNode pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookNode</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DualLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//头节点，而第一个节点的pre指向null</span></span><br><span class="line">    BookNode head=<span class="keyword">new</span> <span class="title class_">BookNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="number">0.0</span>);</span><br><span class="line">    <span class="comment">//添加节点到尾部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(BookNode newNode)</span>&#123;</span><br><span class="line">        BookNode temp=head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next==<span class="literal">null</span>)&#123;<span class="comment">//此时双向链表是空</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要把新的节点给上一个节点</span></span><br><span class="line">        <span class="comment">//需要把上一个节点next指向新的节点</span></span><br><span class="line">        temp.next=newNode;</span><br><span class="line">        newNode.pre=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="comment">//条件：双向链表中的每一个节点的id和修改的id对比，如果对比成功，就修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">UpdateNode</span><span class="params">(BookNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空链表&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BookNode temp=head.next;</span><br><span class="line">        <span class="comment">//怎么直到是否找到呢</span></span><br><span class="line">        <span class="type">boolean</span> flg=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//没找到</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.id==node.id)&#123;<span class="comment">//找到了</span></span><br><span class="line">                flg=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg)&#123;</span><br><span class="line">            temp.name=node.name;</span><br><span class="line">            temp.price=node.price;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到要修改的节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双链表的删除,根据id编号进行删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是一个空链表&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BookNode temp=head.next;</span><br><span class="line">        <span class="type">boolean</span> flg=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.id==id)&#123;</span><br><span class="line">                flg=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg)&#123;<span class="comment">//不用关temp节点的指向空，没人指它就当垃圾回收了</span></span><br><span class="line">            temp.pre.next=temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp.next!=<span class="literal">null</span>)&#123;<span class="comment">//是否是最后一个元素</span></span><br><span class="line">                temp.next.pre=temp.pre;<span class="comment">//如果不判断的话，空指针异常</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未找到该节点&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="单向链表约瑟夫问题："><a href="#单向链表约瑟夫问题：" class="headerlink" title="单向链表约瑟夫问题："></a>单向链表约瑟夫问题：</h6><p>比如12345连在一起，数到2出列，第二次1345连在一起，从3开始数，然后135，从5开始数….循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;<span class="comment">//节点编号</span></span><br><span class="line">    <span class="keyword">private</span> Boy next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boy <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Boy next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleSingleLinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boy first=<span class="keyword">new</span> <span class="title class_">Boy</span>(-<span class="number">1</span>);<span class="comment">//首节点，first代表head指针，指向第一个节点</span></span><br><span class="line">    <span class="comment">//构建长度为nums的环形列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBoy</span><span class="params">(<span class="type">int</span> nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数据不正确&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Boy temp=<span class="literal">null</span>;<span class="comment">//快速定位到你上次添加的位置，first指向首节点，temp指向尾节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= nums; i++) &#123;</span><br><span class="line">            Boy boy=<span class="keyword">new</span> <span class="title class_">Boy</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">                first=boy;</span><br><span class="line">                first.setNext(first);</span><br><span class="line">                temp=first;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp.setNext(boy);</span><br><span class="line">                boy.setNext(first);</span><br><span class="line">                temp=boy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看环形链表的节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showBoy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first.getNo()==-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Boy boy=first;<span class="comment">//boy指针</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小孩的编号&quot;</span>+boy.getNo());</span><br><span class="line">            <span class="keyword">if</span> (boy.getNext()==first)&#123;<span class="comment">//说明只有一个节点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            boy=boy.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从哪个小孩开始数，数几次，环形链表中一共有几个小孩</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countBoy</span><span class="params">(<span class="type">int</span> startNo,<span class="type">int</span> countNum,<span class="type">int</span> nums)</span>&#123;<span class="comment">//nums=k,first移动k-1次</span></span><br><span class="line">        <span class="keyword">if</span> (first==<span class="literal">null</span>||startNo&lt;<span class="number">1</span>||startNo&gt;nums)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入有错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Boy helper=first;<span class="comment">//定义辅助指针，指向第一个节点，循环找到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (helper.getNext()==first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            helper=helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//寻找起始位置,把first定义为起始位置,</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; startNo-<span class="number">1</span>; j++) &#123;<span class="comment">//help和first往下走k-1次</span></span><br><span class="line">            first=first.getNext();</span><br><span class="line">            helper=helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//first找到要出列的那个，移动countNum-1次,help也移动countNum-1次</span></span><br><span class="line">        <span class="comment">//当小孩进行报数时，数到countNum的孩子出列,找到了已出列的孩子</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(helper==first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; countNum-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                first=first.getNext();<span class="comment">//此时first就是要出列的人</span></span><br><span class="line">                helper=helper.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;小孩&quot;</span>+first.getNo()+<span class="string">&quot;出列&quot;</span>);</span><br><span class="line">            first=first.getNext();</span><br><span class="line">            helper.setNext(first);<span class="comment">//利用指针指向来让小孩出列（不指那个小孩）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最后出圈的小孩&quot;</span>+first.getNo());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="稀疏数组："><a href="#稀疏数组：" class="headerlink" title="稀疏数组："></a>稀疏数组：</h6><p>剖析：第一行数据含义：存在多少行，多少列，几个值,行和列都是从0开始<br>            第二行之后的含义：所在行，列，值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.array;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟棋盘数据，使用二维数组</span></span><br><span class="line">        <span class="type">int</span>[][] array=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];<span class="comment">//11行11列</span></span><br><span class="line">        array[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;<span class="comment">//第二行第三列</span></span><br><span class="line">        array[<span class="number">2</span>][<span class="number">4</span>]=<span class="number">2</span>;<span class="comment">//第三行第五列</span></span><br><span class="line">        <span class="comment">//打印棋盘查看效果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : array) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> val : row) &#123;</span><br><span class="line">                System.out.print(val+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要把如上的二维数组中有效的数据压缩至稀疏数组中去</span></span><br><span class="line">        <span class="comment">//1.计算有效数据的个数</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;有效数据的个数:&quot;+sum);</span></span><br><span class="line">        <span class="comment">//创建稀疏数组(小型二维数组)</span></span><br><span class="line">        <span class="type">int</span> [][] parseArray=<span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//给第“0”行赋值</span></span><br><span class="line">        parseArray[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">11</span>;</span><br><span class="line">        parseArray[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">11</span>;</span><br><span class="line">        parseArray[<span class="number">0</span>][<span class="number">2</span>]=sum;</span><br><span class="line">        <span class="comment">//定义一个指针指向第0行,把有效数据放入到稀疏数组中</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//指针,指向第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;<span class="comment">//行索引</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;<span class="comment">//列索引</span></span><br><span class="line">                <span class="comment">//判断是否是有效数据</span></span><br><span class="line">                <span class="keyword">if</span> (array[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    parseArray[count][<span class="number">0</span>]=i;</span><br><span class="line">                    parseArray[count][<span class="number">1</span>]=j;</span><br><span class="line">                    parseArray[count][<span class="number">2</span>]=array[i][j];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印稀疏数组</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; parseArray.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(parseArray[i][0]+&quot;  &quot;+parseArray[i][1]+&quot;  &quot;+parseArray[i][2]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//把稀疏数组转为原始的二维数组</span></span><br><span class="line">        <span class="type">int</span>[][] oldArray=<span class="keyword">new</span> <span class="title class_">int</span>[parseArray[<span class="number">0</span>][<span class="number">0</span>]][parseArray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=count; i++) &#123;<span class="comment">//根据指针的个数来还原。count可以换成sum+1,count从1开始</span></span><br><span class="line">            oldArray[parseArray[i][<span class="number">0</span>]][parseArray[i][<span class="number">1</span>]]=parseArray[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看原始二维数组棋盘</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : oldArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> val : row) &#123;</span><br><span class="line">                System.out.println(val+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="队列：删除的时候front自增，添加的时候rear自增"><a href="#队列：删除的时候front自增，添加的时候rear自增" class="headerlink" title="队列：删除的时候front自增，添加的时候rear自增"></a>队列：删除的时候front自增，添加的时候rear自增</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(rearPoint+<span class="number">1</span>)%maxSize==frontPoint：判断队列为满的条件</span><br><span class="line">frontPoint==rearPoint:判断队列为空</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> frontPoint;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rearPoint;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize=maxSize;</span><br><span class="line">        array=<span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        frontPoint=-<span class="number">1</span>;</span><br><span class="line">        rearPoint=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前队列是否是以满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rearPoint+<span class="number">1</span>==maxSize;<span class="comment">//两个指针相等</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否是空队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frontPoint==rearPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加元素进队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span>&#123;<span class="comment">//n是赋值</span></span><br><span class="line">    <span class="comment">//判断是否为满</span></span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列以满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rearPoint++;</span><br><span class="line">        array[rearPoint]=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取队列元素并且删除队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;空队列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        frontPoint++;</span><br><span class="line">        <span class="keyword">return</span> array[frontPoint];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看队列中的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;空队列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;=&quot;</span>+array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看队头的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">frontQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;空队列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[frontPoint+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="递归：要有一个结束的点"><a href="#递归：要有一个结束的点" class="headerlink" title="递归：要有一个结束的点"></a>递归：要有一个结束的点</h6><p>递归一定要向递归条件递进（人可以理解循环，神可以理解递归）</p><p>小球走迷宫：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MazeApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] map=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">//设置第一行和最后一行为墙，设置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置第一列和第七列为墙</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置障碍墙：</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;新的迷宫：&quot;</span>);</span><br><span class="line">        isRun(map,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小球走的路线&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//小球的起始位置(1,1),小球终止位置（6,5）</span></span><br><span class="line">    <span class="comment">//设置标识，元素为0代表没有走过，元素为1代表是墙，元素为2代表可以走，元素为3代表走过了</span></span><br><span class="line">    <span class="comment">//但是走不通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isRun</span><span class="params">(<span class="type">int</span>[][] map,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>]==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j]==<span class="number">0</span>)&#123;<span class="comment">//没有走过该点</span></span><br><span class="line">                map[i][j]=<span class="number">2</span>;</span><br><span class="line">                <span class="comment">//下，右，上，左</span></span><br><span class="line">                <span class="keyword">if</span> (isRun(map,i+<span class="number">1</span>,j))&#123;<span class="comment">//可以往下走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isRun(map,i,j+<span class="number">1</span>))&#123;<span class="comment">//右</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isRun(map,i-<span class="number">1</span>,j))&#123;<span class="comment">//上</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isRun(map,i,j-<span class="number">1</span>))&#123;<span class="comment">//左</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    map[i][j]=<span class="number">3</span>;<span class="comment">//上下左右都不能走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//不能来回反复走</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="基数排序："><a href="#基数排序：" class="headerlink" title="基数排序："></a>基数排序：</h6><p>思想：先确定最高位数，位数不够的在前面补0，先按个位排序，在按十位排序，最后按百位排序。桶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">53</span>, <span class="number">542</span>, <span class="number">3</span>, <span class="number">63</span>, <span class="number">14</span>, <span class="number">214</span>, <span class="number">154</span>, <span class="number">748</span>, <span class="number">616</span>&#125;;</span><br><span class="line">        sort(arrays);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.获取原序列的最大位数</span></span><br><span class="line"><span class="comment">     * 2.定义二维数组，大小是10，表示10个桶，每个桶则是一个数组</span></span><br><span class="line"><span class="comment">     * 形如：[[],[],[542],[053,003,063]],</span></span><br><span class="line"><span class="comment">     * 不够位数的补0</span></span><br><span class="line"><span class="comment">     * 依次放入，刚开始按照个位从0开始取出，然后按照下一位排</span></span><br><span class="line"><span class="comment">     * 542,053,003,063</span></span><br><span class="line"><span class="comment">     * 第一轮取出：542,053,003,063</span></span><br><span class="line"><span class="comment">     * 第二轮取出：003,542,053,063</span></span><br><span class="line"><span class="comment">     * 第三轮取出：003,053,063,542</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arrays)</span> &#123;</span><br><span class="line">        <span class="comment">//获取最大位数,获取最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arrays[i] &gt; max) &#123;</span><br><span class="line">                max = arrays[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把int类型转换为字符串类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxlength</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arrays.length];<span class="comment">//这里最坏的情况是所有数都装一个桶</span></span><br><span class="line">        <span class="comment">//辅助数组，用于记录每个桶里的数的个数</span></span><br><span class="line">        <span class="type">int</span>[] bucketElementCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//循环获取数组序列，把各个数都放入到桶里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">locationElement</span> <span class="operator">=</span> arrays[i] % <span class="number">10</span>;<span class="comment">//获取到桶下标</span></span><br><span class="line">            <span class="comment">//借助辅助数组，直到新的数放入到桶中的哪个位置</span></span><br><span class="line">            bucket[locationElement][bucketElementCount[locationElement]]=arrays[i];</span><br><span class="line">            bucketElementCount[locationElement]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//怎么取？还用问，当然是借助辅助数组</span></span><br><span class="line">        <span class="comment">//遍历每一个桶，将元素放入到原数组中</span></span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCount.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketElementCount[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCount[i]; j++) &#123;<span class="comment">//遍历每一个桶的数据</span></span><br><span class="line">                    arrays[index++]=bucket[i][j];<span class="comment">//对原始数组重新赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bucketElementCount[i]=<span class="number">0</span>;<span class="comment">//把每个桶都置为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arrays));</span><br><span class="line">        <span class="comment">//判断十位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">locationElement</span> <span class="operator">=</span> arrays[i] /<span class="number">10</span>% <span class="number">10</span>;<span class="comment">//获取到桶下标</span></span><br><span class="line">            <span class="comment">//借助辅助数组，直到新的数放入到桶中的哪个位置</span></span><br><span class="line">            bucket[locationElement][bucketElementCount[locationElement]]=arrays[i];</span><br><span class="line">            bucketElementCount[locationElement]++;</span><br><span class="line">        &#125;</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCount.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketElementCount[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCount[i]; j++) &#123;<span class="comment">//遍历每一个桶的数据</span></span><br><span class="line">                    arrays[index++]=bucket[i][j];<span class="comment">//对原始数组重新赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bucketElementCount[i]=<span class="number">0</span>;<span class="comment">//把每个桶都置为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arrays));</span><br><span class="line">        <span class="comment">//百位比较</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">locationElement</span> <span class="operator">=</span> arrays[i] /<span class="number">100</span>% <span class="number">10</span>;<span class="comment">//获取到桶下标</span></span><br><span class="line">            <span class="comment">//借助辅助数组，直到新的数放入到桶中的哪个位置</span></span><br><span class="line">            bucket[locationElement][bucketElementCount[locationElement]]=arrays[i];</span><br><span class="line">            bucketElementCount[locationElement]++;</span><br><span class="line">        &#125;</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCount.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketElementCount[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCount[i]; j++) &#123;<span class="comment">//遍历每一个桶的数据</span></span><br><span class="line">                    arrays[index++]=bucket[i][j];<span class="comment">//对原始数组重新赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bucketElementCount[i]=<span class="number">0</span>;<span class="comment">//把每个桶都置为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arrays));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;查看时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">53</span>, <span class="number">542</span>, <span class="number">3</span>, <span class="number">63</span>, <span class="number">14</span>, <span class="number">214</span>, <span class="number">154</span>, <span class="number">748</span>, <span class="number">616</span>&#125;;</span><br><span class="line">    SimpleDateFormat simpleDateFormat=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-mm-dd HH:MM:ss:SS&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;开始前&quot;</span>+simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    sort(arrays);</span><br><span class="line">    System.out.println(<span class="string">&quot;结束后&quot;</span>+simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="冒泡排序：六个元素只需要比较无论，最后一个元素不用比较，每一趟比较arr-length-1-i次"><a href="#冒泡排序：六个元素只需要比较无论，最后一个元素不用比较，每一趟比较arr-length-1-i次" class="headerlink" title="冒泡排序：六个元素只需要比较无论，最后一个元素不用比较，每一趟比较arr.length-1-i次"></a>冒泡排序：六个元素只需要比较无论，最后一个元素不用比较，每一趟比较arr.length-1-i次</h6><p>数组-&gt;字符串，用Arrays.toString(数组)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubblingSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arrays=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">//第一层表示走了几趟</span></span><br><span class="line">        <span class="comment">//第二次循环是表示每趟走多少此</span></span><br><span class="line">        <span class="comment">//需要一个辅助变量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrays.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arrays[j]&gt;arrays[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> temp=<span class="number">0</span>;<span class="comment">//类似空桶</span></span><br><span class="line">                    temp=arrays[j];</span><br><span class="line">                    arrays[j]=arrays[j+<span class="number">1</span>];</span><br><span class="line">                    arrays[j+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arrays));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git必知必会（详细版）</title>
      <link href="/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit/"/>
      <url>/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="Git介绍：分布式版本控制工具"><a href="#Git介绍：分布式版本控制工具" class="headerlink" title="Git介绍：分布式版本控制工具"></a>Git介绍：分布式版本控制工具</h4><h6 id="git"><a href="#git" class="headerlink" title="git"></a>git</h6><p>git常用命令<br>idea集成git</p><h6 id="github"><a href="#github" class="headerlink" title="github"></a>github</h6><p>创建远程库<br>代码推送:push<br>代码拉取:pull<br>代码克隆：clone<br>ssh免密登录<br>idea集成github</p><h6 id="gitee码云"><a href="#gitee码云" class="headerlink" title="gitee码云"></a>gitee码云</h6><p>idea继承Gitee码云<br>码云连接GitHub进行代码的复制和迁移</p><h6 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h6><p>gitLab服务器的搭建和部署<br>idea集成Gitlab</p><h6 id="集中式版本SVN-CSV等"><a href="#集中式版本SVN-CSV等" class="headerlink" title="集中式版本SVN,CSV等:"></a>集中式版本SVN,CSV等:</h6><p>概念<br>a把a的代码提交到中央服务器版本是a1,b把a的代码拉下来修改提交到中央服务器是a2,c把a或者b的代码拉下来修改提交到中央服务器版本是a3，缺点：单点故障：如果中央服务器坏了，完犊子三个人谁都别想提交，不能做版本控制,好处：管理员好管理，可以开放权限，架构师看的代码多，实习生看的代码少</p><h6 id="分布式版本控制工具："><a href="#分布式版本控制工具：" class="headerlink" title="分布式版本控制工具："></a>分布式版本控制工具：</h6><p>概念<br>每个人的电脑都是一台”中央服务器“，git有远程库A上传到远程库，B可以拉下来A的远程库代码，在自己的电脑做版本控制，在本地可以做版本控制，一般远程库不能故障，即使故障，在远程库都是最新的代码，在本地库都是不同的版本</p><h6 id="git工作机制-git只是版本控制，并不生成副本-："><a href="#git工作机制-git只是版本控制，并不生成副本-：" class="headerlink" title="git工作机制(git只是版本控制，并不生成副本)："></a>git工作机制(git只是版本控制，并不生成副本)：</h6><p>工作区（写代码）git add——-&gt;临时存储（暂存区）gitcommit——&gt;本地库（历史版本）<br>工作区：代码在磁盘存放的位置（非idea），执行git add到暂存区<br>暂存区：代码<u>添加</u>到暂存区 提交本地库执行commit<br>本地库：一旦提交到本地库就生成历史版本，提交到本地库的版本删不掉(比如提交了v3删不掉，只能提交v4重新提交)</p><h6 id="代码托管中心（远程库）："><a href="#代码托管中心（远程库）：" class="headerlink" title="代码托管中心（远程库）："></a>代码托管中心（远程库）：</h6><p>从本地库推送到远程库（push），全世界人都能看到<br>局域网–gitlab<br>互联网–GitHub(外网)，Gitee(国内网站)</p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p>ctrl+l：翻页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">on branch master代表主干分支</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前git版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git --version</span></span><br><span class="line">git version 2.34.0.windows.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首次一定要设置用户签名，否则无法提交代码，签名的作用是区分不同的操作者的身份</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置用户签名（用户名）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name zzh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置用户签名（设置邮箱,不会验证，不用设置真正的邮箱）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email 3081309881@qq.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化基本库(生成.git是隐藏文件，想查看需要ll-a)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line">Initialized empty Git repository in E:/git/Git-space/git-demo/.git/</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看git的本地库状态（在命令行yy复制，p是粘贴）-------一次操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status（红色代表在工作区）</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        hello.txt(红色)</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt（此时在暂存区）</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working direct</span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   hello.txt（绿色）</span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached hello.txt(只是删除了暂存区的git，工作的git还在)</span></span><br><span class="line">rm &#x27;hello.txt&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll   说明暂存区是可以删除的</span></span><br><span class="line">total 5</span><br><span class="line">drwxr-xr-x 1 zzh 197121  0 Mar 17 18:17 ./</span><br><span class="line">drwxr-xr-x 1 zzh 197121  0 Mar 17 18:09 ../</span><br><span class="line">drwxr-xr-x 1 zzh 197121  0 Mar 17 18:25 .git/</span><br><span class="line">-rw-r--r-- 1 zzh 197121 19 Mar 17 18:17 hello.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">继续添加到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从暂存区提交到本地库，添加历史版本（f04bded]就是版本号）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;firstcommit&quot;</span> hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">[master (root-commit) f04bded] firstcommit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看提交后的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean（提交后了）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看日志版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">f04bded (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): firstcommit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看日志版本（详细版）f04bdeda7d54eaf8ab4138efd267155fc72a350f版本号</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line">commit f04bdeda7d54eaf8ab4138efd267155fc72a350f (HEAD -&gt; master)</span><br><span class="line">Author: zzh &lt;3081309881@qq.com&gt;</span><br><span class="line">Date:   Thu Mar 17 18:32:46 2022 +0800</span><br><span class="line"></span><br><span class="line">    firstcommit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello,git,hellozzh   2222222222222222222222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status <span class="comment">#（modified）此时提示已经被修改了，但是此次的修改还没有添加到暂存区</span></span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   hello.txt（红色）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt<span class="comment">#在暂存区当中</span></span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   hello.txt(绿色)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提交本地库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;second commit&quot;</span> hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">[master 3ead1a7] second commit</span><br><span class="line"> 1 file changed,   1 insertion(+), 1 deletion(-)#一行新增一行删除代表修改，因为git只认删除和修改</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean#说明被提交了中间工作节点干净了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: second commit#代表指针指向第二个版本</span><br><span class="line">f04bded HEAD@&#123;1&#125;: commit (initial): firstcommit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git版本穿梭"><a href="#git版本穿梭" class="headerlink" title="git版本穿梭"></a>git版本穿梭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">穿梭到第二个版本 从.git当中可以看出来HEAD---&gt;MASTER分支---&gt;git版本 f04bded</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 3ead1a7</span></span><br><span class="line">HEAD is now at 3ead1a7 second commit</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;1&#125;: commit: third commit</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: second commit#此时箭头指向第二个版本</span><br><span class="line">f04bded HEAD@&#123;3&#125;: commit (initial): firstcommit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git分支操作-重要-：多头操作互不影响"><a href="#git分支操作-重要-：多头操作互不影响" class="headerlink" title="git分支操作(重要)：多头操作互不影响"></a>git分支操作(重要)：多头操作互不影响</h4><h4 id="合并冲突：同一个文件被不同的分支修改"><a href="#合并冲突：同一个文件被不同的分支修改" class="headerlink" title="合并冲突：同一个文件被不同的分支修改"></a>合并冲突：同一个文件被不同的分支修改</h4><p>master和hot-fix发生冲突手动修改后，master版本会变,hot-fix版本不会变<br>master不修改hop-fix修改,master合并hop-fix后他俩的head指向同一个版本，即是hop-fix的版本</p><h6 id="合并后指针指向两个合并过的分支"><a href="#合并后指针指向两个合并过的分支" class="headerlink" title="合并后指针指向两个合并过的分支"></a>合并后指针指向两个合并过的分支</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">合并后指向HEAD指向master和hotfix版本是65763e9</span><br><span class="line">65763e9 (HEAD -&gt; master, hot-fix) HEAD@&#123;0&#125;: merge hot-fix: Fast-forward</span><br><span class="line">3ead1a7 HEAD@&#123;1&#125;: checkout: moving from hot-fix to master</span><br><span class="line">65763e9 (HEAD -&gt; master, hot-fix) HEAD@&#123;2&#125;: commit: hot-fix firstcommit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 3ead1a7</span></span><br><span class="line">HEAD is now at 3ead1a7 second commit</span><br><span class="line">让指向master指针退回到版本3ead1a7，此时hotfix版本还是指向65763e9</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3ead1a7</span><br><span class="line">65763e9 (hot-fix) HEAD@&#123;1&#125;: merge hot-fix: Fast-forward</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;2&#125;: checkout: moving from hot-fix to master</span><br><span class="line">65763e9 (hot-fix) HEAD@&#123;3&#125;: commit: hot-fix firstcommit</span><br><span class="line">08b7c0e HEAD@&#123;4&#125;: checkout: moving from master to hot-fix</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;5&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;6&#125;: reset: moving to 08b7c0e</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;7&#125;: reset: moving to 3ead1a7</span><br><span class="line">f04bded HEAD@&#123;8&#125;: reset: moving to f04bded</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;9&#125;: reset: moving to 3ead1a7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前实验结果为：</p><p>假设有master和branch1，用master合并branch1时（在master分支中执行git merge branch1）：</p><p>1、在同一个地方，master做了修改，branch1没有修改，则合并后是修改了的</p><p>2、在同一个地方，master没有修改，branch1修改了，则合并和还是修改了的</p><p>也就是说，在同一个地方，一个分支做了修改，另一个分支没有做修改，则合并后的结果总是修改了的</p><p>3、在同一个地方，两条分支都做了修改，则产生冲突。注意的是，这里说的同一个地方，并不一定是绝对一模一样的地方，而是在一个很小的范围内，都算同一个地方，</p><p>比如：master修改了第一行，而branch1修改的是第二行，这也算是同一个地方，git会认为这是在同一个地方两个分支都做了修改，因而会产生冲突。这个应该是跟文件系统的block相关了，猜测是同一个block都算是同一个地方。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">* master f04bded firstcommit#目前只有一个master分支，一个分支有三个版本</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch hot-fix</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">  hot-fix 08b7c0e third commit</span><br><span class="line">* master  08b7c0e third commit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到hot-fix分支（主分支是给客户用的）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout hot-fix</span></span><br><span class="line">Switched to branch &#x27;hot-fix&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接进行到部署（commit）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;hot-fix firstcommit&quot;</span> hello.txt</span></span><br><span class="line">On branch hot-fix</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">65763e9 (HEAD -&gt; hot-fix) HEAD@&#123;0&#125;: commit: hot-fix firstcommit#这里指向的是hot-fix</span><br><span class="line">08b7c0e HEAD@&#123;1&#125;: checkout: moving from master to hot-fix</span><br><span class="line">3ead1a7 (master) HEAD@&#123;2&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;3&#125;: reset: moving to 08b7c0e</span><br><span class="line">3ead1a7 (master) HEAD@&#123;4&#125;: reset: moving to 3ead1a7</span><br><span class="line">f04bded HEAD@&#123;5&#125;: reset: moving to f04bded</span><br><span class="line">3ead1a7 (master) HEAD@&#123;6&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;7&#125;: commit: third commit</span><br><span class="line">3ead1a7 (master) HEAD@&#123;8&#125;: commit: second commit</span><br><span class="line">f04bded HEAD@&#123;9&#125;: commit (initial): firstcommit</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello,git,hellozzh   2222222 333333333</span><br><span class="line">iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换成master分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello,git,hellozzh   2222222222222222222222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">合并分支（把要合并的分支合并到当前分支）原则，值是看谁是最后修改的，但是改变的文件看的是谁调用的合并命令的。</span></span><br><span class="line">比如a中写$ git merge b hello，结果只是a中的hello.txt改变了，但是值取决于是谁最后修改的hello.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge hot-fix</span></span><br><span class="line">Updating 3ead1a7..65763e9</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">冲突合并：同一位置两个分支都合并（比如master和hopfix都修改了代码，这时需要我们手动的去修改代码。并且commit的时候不能加文件的名字（hello.txt）,因为它不知道你提交的是哪个hello.txt尚硅谷p18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="小结1：版本控制都是在本地的"><a href="#小结1：版本控制都是在本地的" class="headerlink" title="小结1：版本控制都是在本地的"></a>小结1：版本控制都是在本地的</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看和创建远程库,并起别名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add git-demo https://github.com/zzhcat/git--demo.git<span class="comment">#创建别名</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看别名：别名可以推送(push)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">git-demo        https://github.com/zzhcat/git--demo.git (fetch)</span><br><span class="line">git-demo        https://github.com/zzhcat/git--demo.git (push)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push git-demo master</span></span><br><span class="line">Enumerating objects: 24, done.</span><br><span class="line">Counting objects: 100% (24/24), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (13/13), done.</span><br><span class="line">Writing objects: 100% (24/24), 1.77 KiB | 604.00 KiB/s, done.</span><br><span class="line">Total 24 (delta 4), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (4/4), done.</span><br><span class="line">To https://github.com/zzhcat/git--demo.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改完远程库后，远程库和本地库不一样了，此时本地库需要拉取远程库的代码</span></span><br><span class="line">提示如果拉取失败需要：$ git config --global http.sslVerify &quot;false&quot;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull git-demo master</span></span><br><span class="line">remote: Enumerating objects: 5, done.</span><br><span class="line">remote: Counting objects: 100% (5/5), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 657 bytes | 38.00 KiB/s, done.</span><br><span class="line">From https://github.com/zzhcat/git--demo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   8ececc3..4b65f5d  master     -&gt; git-demo/master</span><br><span class="line">Updating 8ececc3..4b65f5d</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">4b65f5d (HEAD -&gt; master, git-demo/master) HEAD@&#123;0&#125;: pull git-demo master: Fast-f</span><br><span class="line">orward</span><br><span class="line">8ececc3 HEAD@&#123;1&#125;: checkout: moving from hot-fix to master</span><br><span class="line">62bb7a4 (hot-fix) HEAD@&#123;2&#125;: commit (merge): hot9 6dsa</span><br><span class="line">0f04668 HEAD@&#123;3&#125;: commit: hot9 6</span><br><span class="line">80528fa HEAD@&#123;4&#125;: checkout: moving from master to hot-fix</span><br><span class="line">8ececc3 HEAD@&#123;5&#125;: commit: master 23135</span><br></pre></td></tr></table></figure><h5 id="团队合作克隆代码（不演示，因为需要两个github账号）"><a href="#团队合作克隆代码（不演示，因为需要两个github账号）" class="headerlink" title="团队合作克隆代码（不演示，因为需要两个github账号）"></a>团队合作克隆代码（不演示，因为需要两个github账号）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git clone http://github.com/yueyue/git-demo.git  #我想拿到岳不群的代码</span><br><span class="line">执行后在我的库上生成三个tips</span><br><span class="line">1.克隆代码不需要账号密码</span><br><span class="line">2.初始化本地库</span><br><span class="line">3.创建别名（与岳不群的一样）</span><br><span class="line"></span><br><span class="line">如果我修改了我pull下来的hello.txt,提交本地库后，上传到远程库(岳不群的)之后，并且需要登录我的账号</span><br><span class="line">此时并不能提交上去，需要岳不群邀请我进华山派才能提交到岳不群的远程库</span><br><span class="line">解决方案：</span><br><span class="line">登录岳不群----&gt;settings------&gt;manage access---------&gt;invite a collaborator 输入对方的账号------&gt;完成后点击pending invite-------&gt;复制pending invite交给我（微信）---------&gt;我上号后复制pending invite邀请函-------&gt;在地址栏输入后接收邀请-----------&gt;此时我可以git push （岳不群的仓库） master-------&gt;此时远程库只有一份我提交的hello.txt---------&gt;但是岳不群本地有很多</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="跨团队合作（三人：东方不败与我们合作-我（令狐冲）岳不群-）外包"><a href="#跨团队合作（三人：东方不败与我们合作-我（令狐冲）岳不群-）外包" class="headerlink" title="跨团队合作（三人：东方不败与我们合作   我（令狐冲）岳不群 ）外包"></a>跨团队合作（三人：东方不败与我们合作   我（令狐冲）岳不群 ）外包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.我把项目链接发给东方不败</span><br><span class="line">2.东方不败点fork把岳不群的代码叉过来叉到自己的本地库（会显示 fork from yueyue/git-demo），在线修改代码hello.txt,点击下面commit（注意：此时只是修改了自己的的库的代码，和岳不群与我没什么关系）</span><br><span class="line">3.东方不败点击pull request，点击create pull request,并描述一些话，点击pullrequest 请求给岳不群</span><br><span class="line">4.岳不群打开账号点击pullrequest 点击链接文件即可看到修改的代码，并且可以添加评论</span><br><span class="line">5.岳不群点击merge:pull request合并东方不败的代码，此时岳不群的库就是东方不败发过来的代码，并且我也能看到</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SSH免密登录（以后拉代码方便）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登陆账号</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -C 3081309881@qq.com</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/zzh/.ssh/id_rsa):</span><br><span class="line">Created directory &#x27;/c/Users/zzh/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/zzh/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/zzh/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:UgCwDZIjB49ux1tMzvfCM29WVLSa1IGHgcAmLSZQG/w 3081309881@qq.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|o+*+..+.. ..=o   |</span><br><span class="line">|++.*o+ = . o.oo  |</span><br><span class="line">|ooo.=.+ .  .oo   |</span><br><span class="line">|. . =E .  ..o    |</span><br><span class="line">| o o =..S .o     |</span><br><span class="line">|. . o o..  .     |</span><br><span class="line">|   .   = ..      |</span><br><span class="line">|        =o       |</span><br><span class="line">|        o.       |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拿公钥</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> id_rsa.pub</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC6hDlBw4cutiKGlhQiWvOlSt4+h4CQAWVvxzM0DlCPYkj42wSsPH/S17COiLuP1pDZNywOp+qNQ9FcuTAAyA9bursX+6HfBexTh1eGJEoXorA62tVQ+RBfqZkPpx6aUJX1xJPLwcNZVXL+linf9Hk757LcT7p/njW970XjxyuN7UNKjW8d4RmqQrPCFvS10ZBzjs/htoMuDOSrJg5thVOXOlXVol6nzmzmUrUoPZOrtJyWnOgN/kL97vtD3YqZsbdx9onfi3Gexvh51fcNRRXxRhUGTbavWegbZVKs0NV77fmZvdQghU9G2hz87V4M9PERBjPVKDgOkMiEv1dzgE2UigZXb/SbwyxTOXNSuVeUXNaNCLAxhwZVLDX/i5/fykVqyruKz5QnJeLEWN6wnr2REViWY0JXeix9diASGo39+ZtTcYZSpm+nXlwm0ZA68XwjlVn7gHsY3Loaevr410AuT7pB7IbaJqdgFKQ1BGtXA/FNyNVXQXGADqZ0quq9luU= 3081309881@qq.com</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在本地仓库下</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull git@github.com:zzhcat/git--demo.git master <span class="comment">#git@github.com:zzhcat/git--demo为ssh地址</span></span></span><br><span class="line">From github.com:zzhcat/git--demo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此时可以修改代码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来"><a href="#小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来" class="headerlink" title="小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来"></a>小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来</h6><h4 id="idea集成git"><a href="#idea集成git" class="headerlink" title="idea集成git"></a>idea集成git</h4><h5 id="配置忽略文件-只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关"><a href="#配置忽略文件-只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关" class="headerlink" title="配置忽略文件 只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关"></a>配置忽略文件 只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关</h5><h6 id="1-配置git-ignore-前缀随便取-在user-x2F-zzh用户下"><a href="#1-配置git-ignore-前缀随便取-在user-x2F-zzh用户下" class="headerlink" title="1.配置git.ignore(前缀随便取)在user&#x2F;zzh用户下"></a>1.配置git.ignore(前缀随便取)在user&#x2F;zzh用户下</h6><h6 id="2-原则是放在哪里都可以，为了让-x2F-gitconfig文件引用"><a href="#2-原则是放在哪里都可以，为了让-x2F-gitconfig文件引用" class="headerlink" title="2.原则是放在哪里都可以，为了让~&#x2F;.gitconfig文件引用"></a>2.原则是放在哪里都可以，为了让~&#x2F;.gitconfig文件引用</h6><h6 id="x2F-x2F-3-此时pom-xml变红说明进行了版本控制（并没有commit和add"><a href="#x2F-x2F-3-此时pom-xml变红说明进行了版本控制（并没有commit和add" class="headerlink" title="&#x2F;&#x2F;3.此时pom.xml变红说明进行了版本控制（并没有commit和add)"></a><img src="https://img-blog.csdnimg.cn/479484acb9da4b5093e84a36d37d725f.png">&#x2F;&#x2F;3.此时pom.xml变红说明进行了版本控制（并没有commit和add)</h6><p><img src="https://img-blog.csdnimg.cn/bf8fa1535d0e40c780a8b46ac2699d31.png"></p><h6 id="4-此时pom-xml变绿说明提交到暂存区"><a href="#4-此时pom-xml变绿说明提交到暂存区" class="headerlink" title="4.此时pom.xml变绿说明提交到暂存区"></a>4.此时pom.xml变绿说明提交到暂存区</h6><h6 id="5-此时编写代码后有一个小弹框，点canal"><a href="#5-此时编写代码后有一个小弹框，点canal" class="headerlink" title="5.此时编写代码后有一个小弹框，点canal"></a>5.此时编写代码后有一个小弹框，点canal</h6><p><img src="https://img-blog.csdnimg.cn/9368124d00be461d9d459bd13493bc77.png"></p><h6 id="6-此时需要add，可以逐个add，也可以右击项目整个add"><a href="#6-此时需要add，可以逐个add，也可以右击项目整个add" class="headerlink" title="6.此时需要add，可以逐个add，也可以右击项目整个add"></a>6.此时需要add，可以逐个add，也可以右击项目整个add</h6><p><img src="https://img-blog.csdnimg.cn/8df34b6d2bbe45feaff23b6b4befa67e.png"></p><h6 id="7-commit到本地仓库输入版本"><a href="#7-commit到本地仓库输入版本" class="headerlink" title="7.commit到本地仓库输入版本"></a>7.commit到本地仓库输入版本</h6><p><img src="https://img-blog.csdnimg.cn/2b3956ab84d24f84915720f6648eab48.png"></p><h6 id="8-黄色的代表ignore的目录"><a href="#8-黄色的代表ignore的目录" class="headerlink" title="8.黄色的代表ignore的目录"></a>8.黄色的代表ignore的目录</h6><p><img src="https://img-blog.csdnimg.cn/57c81a53cecd47a3bc9f3bb313c8cf6d.png"></p><h6 id="9-代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add-commit"><a href="#9-代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add-commit" class="headerlink" title="9.代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add,commit"></a>9.代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add,commit</h6><h6 id="10-提交后双击java文件可以看到前后版本变化"><a href="#10-提交后双击java文件可以看到前后版本变化" class="headerlink" title="10.提交后双击java文件可以看到前后版本变化"></a>10.提交后双击java文件可以看到前后版本变化</h6><p><img src="https://img-blog.csdnimg.cn/2a247d097e0c4b5a84cdaba543ac92f7.png"></p><h6 id="11-查询版本信息，左下角有Git-点击log即可看到版本信息"><a href="#11-查询版本信息，左下角有Git-点击log即可看到版本信息" class="headerlink" title="11.查询版本信息，左下角有Git,点击log即可看到版本信息"></a>11.查询版本信息，左下角有Git,点击log即可看到版本信息</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEJcPe.png"></p><p><img src="https://img-blog.csdnimg.cn/877375e7d7684388a3af7363000bd535.png"></p><h6 id="12-右键点击切换版本，可以切换到以前的版本"><a href="#12-右键点击切换版本，可以切换到以前的版本" class="headerlink" title="12.右键点击切换版本，可以切换到以前的版本"></a>12.右键点击切换版本，可以切换到以前的版本</h6><p><img src="https://img-blog.csdnimg.cn/e2cd35f2ecdc47789a03882f94d84a32.png"></p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git1初始版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git必知必会2（书接上文完结版）</title>
      <link href="/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit2/"/>
      <url>/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h6 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEGY6I.png"></p><h6 id="修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容"><a href="#修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容" class="headerlink" title="修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容"></a>修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEY8sI.md.png"></p><h6 id="idea版两个版本提交后的冲突解决，解决完自动提交"><a href="#idea版两个版本提交后的冲突解决，解决完自动提交" class="headerlink" title="idea版两个版本提交后的冲突解决，解决完自动提交"></a>idea版两个版本提交后的冲突解决，解决完自动提交</h6><p><img src="https://s1.ax1x.com/2022/03/19/qENLxH.md.png"></p><h6 id="idea集成github"><a href="#idea集成github" class="headerlink" title="idea集成github:"></a>idea集成github:</h6><p>settings-&gt;version Control -&gt;github—-&gt;登录</p><h6 id="分享项目发到github"><a href="#分享项目发到github" class="headerlink" title="分享项目发到github:"></a>分享项目发到github:</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEaqud.md.png"></p><p>1.remote:别名，一般和库名一致<br>2.repository name:库名，一般和项目名保持一致<br>3.private:私有库</p><h6 id="idea中push的两种方式"><a href="#idea中push的两种方式" class="headerlink" title="idea中push的两种方式"></a>idea中push的两种方式</h6><p><img src="https://s1.ax1x.com/2022/03/19/qE0M7R.md.png"></p><p><img src="https://s1.ax1x.com/2022/03/19/qE0D4P.md.png"></p><h6 id="使用ssh免密登录push"><a href="#使用ssh免密登录push" class="headerlink" title="使用ssh免密登录push"></a>使用ssh免密登录push</h6><p><a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;</a>:zzhcat&#x2F;git-test.git</p><p><img src="https://s1.ax1x.com/2022/03/19/qE0jER.png"></p><p><img src="https://s1.ax1x.com/2022/03/19/qEBZ5t.png"></p><h6 id="直接在github上修改代码，此时比本地库更新了，需要pull下来"><a href="#直接在github上修改代码，此时比本地库更新了，需要pull下来" class="headerlink" title="直接在github上修改代码，此时比本地库更新了，需要pull下来"></a>直接在github上修改代码，此时比本地库更新了，需要pull下来</h6><p>注意：push是将本地库代码推送到远程库，如果本地库代码跟远程库代码不一致，push的操作会被拒绝，也就是说，要想push成功，一定要保证本地库的版本要比远程库版本高！<strong>因此一个成熟的程序员在动手修改本地代码之前，一定要先检查远程库跟本地库代码的区别！如果本地库代码版本已经落后，切记要先pull拉取一下远程哭，在将本地代码更新后，发送到远程库</strong>push之前，请你先pull一下，而且你拉取的时候一定要确保本地的代码不更改</p><h6 id="新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）"><a href="#新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）" class="headerlink" title="新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）"></a>新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）</h6><p>1.点击get from version control<br>2.选择git方式，选择ssh协议（http协议）</p><h6 id="小结1："><a href="#小结1：" class="headerlink" title="小结1："></a>小结1：</h6><p>git clone是克隆，git pull 是拉。<br>但是，也有区别：<br>从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库，叫做clone.（clone是将一个库复制到你的本地，是一个本地从无到有的过程）<br>从远程服务器获取到一个branch分支的更新到本地，并更新本地库，叫做pull.（pull是指同步一个在你本地有版本的库内容更新的部分到你的本地库）<br>git pull相当于是从远程获取最新版本并merge（合并）到本地     git pull &#x3D; git fetch + git merge，git fetch更安全一些<br>git clone是远程操作的第一步，通常是从远程主机克隆一个版本库，eg:$ git clone ##   该命令会在本地主机生成一个目录，与远程主机的版本库同名，如果要是制定不同的目录名，可以将目录名作为git clone 命令的第二个参数。eg：$ git clone #版本库网址# #本地目录名#     git clone支持多种协议，除了http（s),还有ssh,git,本地协议。<br>git pull 作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。eg:$ git pull ##远程主机（origin） #远程分之(next)#：#本地分之(master)#<br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。eg:$ git pull #远程主机(origin)#　 #远程分之(next)#　相当于1. $ git fetch origin   2.$git merge origin&#x2F;next<br>在某些场合，git会自动在本地和远程分之之间，建立一种追踪关系。比如，在git clone 的时候，所有本地分之默认与远程主机的同名分之，建立追踪关系，也就是，本地的master分之自动“追踪”origin&#x2F;master分之。git 可以手动建立追踪， git branch –set-upstream master origin&#x2F;next   —&gt;指定master分之追踪到origin&#x2F;next。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。$ git pull  表示当前分之自动与唯一一个追踪分之进行合并。</p><h6 id="小结2：工作之前要先git-init一下工作区间，在克隆代码，接着可以pull，修改，push"><a href="#小结2：工作之前要先git-init一下工作区间，在克隆代码，接着可以pull，修改，push" class="headerlink" title="小结2：工作之前要先git init一下工作区间，在克隆代码，接着可以pull，修改，push"></a>小结2：工作之前要先git init一下工作区间，在克隆代码，接着可以pull，修改，push</h6><h6 id="码云多处和github差不多，这里就不浪费时间记笔记了"><a href="#码云多处和github差不多，这里就不浪费时间记笔记了" class="headerlink" title="码云多处和github差不多，这里就不浪费时间记笔记了"></a>码云多处和github差不多，这里就不浪费时间记笔记了</h6>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git2完成版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2022/03/17/%E5%89%8D%E8%A8%80/"/>
      <url>/2022/03/17/%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>hello,I’m zzh，今天心血来潮搭建了一个自己的博客，决定对Java全套进行二轮复习，因此搭了个小博客，记录下自己的成长，以下附上我之前手机记的一些小点。之后从git开始复习记笔记，这一次做到全面，细致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我的路线（踩了无数坑总结的）</span><br><span class="line">java基础（韩顺平）----&gt;javaweb(黑马程序员)----&gt;spring(动力节点)----&gt;springmvc(动力节点)--------&gt;mybatis(动力节点)-------&gt;SSMcrm项目（动力节点）-------&gt;linux(韩顺平)-----&gt;git(尚硅谷)-------&gt;mybatisplus(尚硅谷)-------&gt;nginx(尚硅谷)--------&gt;redis(黑马程序员)-------&gt;数据结构与算法（动力节点）-----&gt;springboot(黑马程序员)  持续更新....</span><br></pre></td></tr></table></figure><p>判断运行类型是不是student或者student的子类  </p><p>继承后子类可以直接写getname()</p><p>this&#x3D;&#x3D;obj相当于person.equals(person)</p><p>非静态方法可以用静态的方法或者成员</p><p>静态方法必须用静态变量，因为是在初始化阶段的</p><p>先调用代码块，后调用构造器，代码块是构造器补充机制</p><p>静态代码块就是类加载会执行，代码块是构造器’执行前都执行代码块，静态的只能加载一次</p><p>子类创建实例，父类也会加载，类加载比较靠前<br>先执行父类代码块和构造器，在执行子类的</p><p>静态的优先级都是一样的</p><p>先执行父类静态，在进行子类静态，然后父类代码块，父类构造器，子类代码块，子类构造器</p><p>子类构造器默认有super(),而且是在最前面，所以调用子类构造器先调用的是父类代码块和构造器</p><p>静态代码块和静态方法只能调用静态成员，因为是在类加载就用到了，普通方法&#x2F;代码块可以调用任意的</p><p>类的加载是全部加载完才会调用输出</p><p>1.是否子类继承父类就直接可以使用父类的方法</p><p>包装类.equals 重写equals方法了。比较的是值是否相等，比如string,Integer</p><p>俩对象都是new出来的肯定不&#x3D;&#x3D;</p><p>final修饰引用类型不能改变地址</p><p>string是不变的常量池，而stringbuffer是在堆中，后面扩容,char数组不是final</p><p>string-&gt;int   用integer.parseint(字符串)</p><p>int stringbuffer-&gt;string 用tostring</p><p>dom元素删除子节点需要先获得父节点</p><p>ctrl+alt+b可以看到接口的实现子类和子接口</p><p>重写方法alt+insert</p><p>ctrl+alt+箭头，可以对操作的文件切换</p><p>object转换成integer可以使用integer.parseint(数字+””)</p><p>getclass获取到的是运行类型</p><p>转换流inputstreamReader可以把字节流转换成字符流，但是只有字节流可以指定编码方式如gbk,utf8</p><p>线程用实现runnable接口的方式可以实现资源共享，比如多个new Thread(同一个线程)</p><p>while循环里面结束是break,方法结束是return</p><p>子类继承父类的public方法都不用写this就可以调用serlvetconfig应用实例3</p><p>参数都是tomcat给的，比如初始化方法init(serlvetconfig config)中的形参</p><p>字节输出流的write方法可以使用String.getBytes方法转换成字节数组，如”hello”.getbytes</p><p>一个服务器端口可以连接多个客户端socket</p><p>sql中的null参与运算的话要用ifnull转换成0</p><p>一般写都是字符串.equals(变量)，否则报空指针异常</p><p>请求转发的&#x2F;转换成&#x2F;server&#x2F;,所以不能请求到外网(请求转发实例)</p><p>&#x2F;如果被浏览器解析就是<a href="http://ip:port，如在html中，如果被服务器解析就是http//ip:port/工程路径，如在web.xml">http://ip:port，如在html中，如果被服务器解析就是http//ip:port/工程路径，如在web.xml</a> Java程序特殊情况response.sendRedict是发给浏览器的，&#x2F;代表浏览器解析</p><p>重定向不能用一个request域（getparamter或者setattrabute），因为不是一个对象</p><p>获取&#x2F;工程名 用getservletcontext().getcontextpath()</p><p>动态绑定机制用运行类型来看，当调用对象方法时候，该方法会和该对象的内存地址&#x2F;运行类型绑定，this也是如此，子类调用父类service中的this.dopost方法，这个this代表子类，servlet规范设计</p><p>方法里面的HSPResponse response即使没有实例化，也可以调用response.getOutputStream</p><p>有一种没创建就使用的感觉</p><p>clasd.getResource(“&#x2F;“).getpath()获得的是真实项目部署的路径（classes），不是源码路径的</p><p>servlet是单例的，只创建一个,tomcat用servletmapping用反射拿到一个servlet对象放入到集合中</p><p>groupby 查询字段当中只能出现被分组的字段和聚合函数，也就是非组函数的字段一定出现在groupby当中</p><p>groupby后面两个字段，代表两两相比，有一个不同的数据就查询出来</p><p>起完别名在where就不能用原来的了，只能在orderby中使用</p><p>过滤条件使用了聚合函数，则必须使用having，不包含聚合函数优先选择where(既有having和where用where)效率高</p><p>from on left where groupby having select distinct orderby limit 后面的不能放入前面，就像分组函数不能用在where，因为得分组才能用分组函数(聚合)  count(*)是在条件后来求总和的</p><p>每个工种每个部门，就是说groupby departmentid,jobid 两个条件来判断，两个条件只要有一个不同就是不同的()</p><p>子查询可以外面用where and连接多个子查询</p><p>子查询内部返回多条，外面也得用多条去接收，外面如in等</p><p>聚合函数不可以嵌套，但是聚合函数取别名之后可以，但是需要子查询满足(from 虚拟表 别名)方式</p><p>子查询可以把查到的数据当成一个新表:select…from(select min(sal) from employees groupby departmentid) “t_dept”这样取别名</p><p>子查询〈&#x3D;all(select…)代表小于等于最小的，反之大于等于更大的是用any</p><p>子查询里面有null值一定要小心，not in子查询的时候一定要小心子查询里面的空值</p><p>相关性的理解(看书)，from后面也可以跟着一个子查询，把子查询当成一个表</p><p>相关性相当于多表连接，而且是从外往里看</p><p>结论:子查询在groupby和limit之外，其他位置都可以声明子查询</p><p>where和having都有的时候优先用where，where优先执行，在where之前不能用分组函数(聚合函数)，之后groupby之后having可以用分组函数别名：select起的字段别名不能在where中使用，但是能在orderby中使用，<br>from on join(left) where groupby having select distinct orderby limit 后面的不能放入前面，就像分组函数不能用在where，因为得分组才能用分组函数(聚合)  count(*)是在条件后来求总和的</p><p>一般分组函数都起别名，但是在where中不能使用</p><p>求最小的可以用orderby在limit(0,1)<br>临时表(虚拟表)挺重要的，用查到的数据起别名</p><p>表名.*，用于select中</p><p>在查询字段处也可以写子查询</p><p>在html中直接写d1&#x2F;d2&#x2F;b.html 代表:http:localhost:8080&#x2F;工程路径&#x2F;d1&#x2F;d2&#x2F;b.html，在b.html访问a.html就是:http:localhost:8080&#x2F;工程路径&#x2F;d1&#x2F;d2&#x2F;a.html(有可能不在b.html同级目录中)所以引出base标签<br>在html中写&#x2F;b.html代表http:localhost:8080&#x2F;b.html(所以自己要加工程名)，在重定向中含义同上，转发可以访问到web-inf下面的页面，在server端的&#x2F;代表映射到web下面的工程路径</p><p>调试蓝色高亮或者下断点到哪代表:你是要执行这一步还是进入我的源码</p><p>转发浏览器url栏地址不变，所以不能用相对路径定位(cookie章作业评讲3)</p><p>获取上下文路径:getServletContext().getContextPath()  或者request.getcontextpath</p><p>默认关闭浏览器后cookies就不存在了，需要重新创建cookies,cookies消失与创建看的是浏览器，而不是servlet,cookies失效了，不代表他消失了，因为没关闭浏览器，只是在做http访问的时候请求不带cookies了，指定过期时间是对当前cookies说的，不是所有</p><p>一次会话代表打开&#x2F;关闭浏览器，而不是访问不同的servlet,会话是双向的，在servlet内修改后记得通知浏览器</p><p>不同会话(会话即是打开关闭浏览器，而不是开个窗口)，jsession不同一次会话代表打开关闭一次浏览器</p><p>根据setmaxAge&#x3D;0不代表生命周期到了，而是直接干掉了,不显示了，该cookies直接被删掉<br>from(子表的查询字段在外表也可以用)</p><p>cookie和session解决的是一次回话多次请求的数据共享，可以设置时间，cookie默认在关闭浏览器就消失了</p><p>object运行类型转换为String类型直接用toString方法就可以了</p><p>class类只能被加载一次，输出所有的hashcode发现是一个值</p><p>request.getContextPath()可以获取到上下文路径</p><p>转发要得到数据需要setattrabute,getattrabute</p><p>谁调用，this就代表谁，传入的是哪个对象，this就是谁，或者当前类的属性</p><p>responebody不走过滤器(对象和json和字符串)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/03/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/03/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h3><p>看见应该看不见的东西时，看见不应该看见的东西时，换作是你会怎么做呢……？</p><p>要是“那些东西”和你讲话，亦或是朝着你走过来的话，你又会怎么做呢……？</p><p>会拔腿就跑吗？还是会学习可疑的法术？又或者是会拜托灵媒师，选择战斗呢？女高中生‧四谷见子所采取的行动是——彻底的无视。</p><p>什么也没看见，什么也没察觉到。这是拥有着钢铁般的精神的女高中生靠着她的无视技能，回避那些异形般的可怕家伙们的故事</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzh.crm.commons.domain;</span><br><span class="line"><span class="comment">//返回的是一个json，推荐封装成实体类，并且在外面，多个包调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReturnObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;<span class="comment">//处理成功获取失败的标记：1---成功,0---失败</span></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> Object retData;<span class="comment">//其它数据，不确定的都是object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getRetData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> retData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRetData</span><span class="params">(Object retData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.retData = retData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/03/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/blog/source\images\a(12).png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
