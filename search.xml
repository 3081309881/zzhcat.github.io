<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mybatis-plus（熬夜复习版）</title>
      <link href="/2022/03/20/mybatisplus/"/>
      <url>/2022/03/20/mybatisplus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="mybatis-plus的特点：比mybatis只做增强不做改变-多处是api调用没啥意思"><a href="#mybatis-plus的特点：比mybatis只做增强不做改变-多处是api调用没啥意思" class="headerlink" title="mybatis-plus的特点：比mybatis只做增强不做改变 多处是api调用没啥意思"></a>mybatis-plus的特点：比mybatis只做增强不做改变 多处是api调用没啥意思</h4><p>快捷键扩充：ctrl+p显示参数类型<br>                        ctrl+h显示类的继承关系（右侧大图）</p><p>框架识别过程：先分析实体类，根据实体类的属性，把属性作为数据库的字段进行操作<br>注意事项：这里的多处封装都是根据的是where条件进行封装的，希望警示一下</p><h3 id="所有方法都针对逻辑删除"><a href="#所有方法都针对逻辑删除" class="headerlink" title="所有方法都针对逻辑删除"></a>所有方法都针对逻辑删除</h3><h6 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `mybatis_plus` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;</span><br><span class="line">use `mybatis_plus`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">`id` bigint(20) NOT NULL COMMENT &#x27;主键ID&#x27;,#mybatisplus默认是雪花算法生成id,所以需要用bigint</span><br><span class="line">`name` varchar(30) DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`age` int(11) DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">`email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-配置yml文件"><a href="#3-配置yml文件" class="headerlink" title="3.配置yml文件"></a>3.配置yml文件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment">#配置连接数据库的各个信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zzh</span></span><br></pre></td></tr></table></figure><h6 id="4-lombok表达式"><a href="#4-lombok表达式" class="headerlink" title="4.lombok表达式"></a>4.lombok表达式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@NoArgsConstructor 无参构造器</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor 有参构造器</span></span><br><span class="line"><span class="comment">//@Setter set方法</span></span><br><span class="line"><span class="comment">//@Getter get方法</span></span><br><span class="line"><span class="comment">//@EqualsAndHashCode 重写equals和hashcode方法</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//上面所有都包括，无有参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-MapperScan注解的使用"><a href="#5-MapperScan注解的使用" class="headerlink" title="5.@MapperScan注解的使用"></a>5.@MapperScan注解的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.zzh.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="comment">//1.扫描mapper接口所在的包</span></span><br><span class="line"><span class="comment">//2.把实现userMapper的代理类统一交给ioc容器管理</span></span><br></pre></td></tr></table></figure><h6 id="6-快速入门"><a href="#6-快速入门" class="headerlink" title="6.快速入门"></a>6.快速入门</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义userMapper继承BaseMapper&lt;User&gt;,注意泛型</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.直接使用，无需编写语句</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//selectList()根据MP内置的条件构造器查询一个list集合，null表示没有条件，即查询所有</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="7-深度剖析原理（反射）"><a href="#7-深度剖析原理（反射）" class="headerlink" title="7.深度剖析原理（反射）"></a>7.深度剖析原理（反射）</h6><p>日志打印信息：SELECT id,name,age,email FROM user<br>需要注意的是实体类的属性名和表的属性名一致（区分大小写），POJO（domain）名字和表名一致（不区分大小写）<br>先抽取实体，在抽取属性，生成对应的sql语句，在注入到mybatis容器当中</p><h6 id="8-配置日志"><a href="#8-配置日志" class="headerlink" title="8.配置日志"></a>8.配置日志</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h6 id="9-CRUD"><a href="#9-CRUD" class="headerlink" title="9.CRUD"></a>9.CRUD</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )</span></span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangsa@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br><span class="line">    System.out.println(user.getId());<span class="comment">//生成的id是雪花算法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="comment">//根据id删</span></span><br><span class="line"><span class="comment">//DELETE FROM user WHERE id=?</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">0</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"><span class="comment">//根据map删（条件）</span></span><br><span class="line"><span class="comment">//DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    </span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);<span class="comment">//name=&#x27;zhangsan&#x27;</span></span><br><span class="line">map.put(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>);<span class="comment">//age=23</span></span><br><span class="line">userMapper.deleteByMap(map);</span><br><span class="line"><span class="comment">//多个id批量删除</span></span><br><span class="line"><span class="comment">//DELETE FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">List&lt;Long&gt; result = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);<span class="comment">//把数组转换成集合</span></span><br><span class="line">userMapper.deleteBatchIds(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//改（根据id改）</span></span><br><span class="line"><span class="comment">//UPDATE user SET name=?, email=? WHERE id=?</span></span><br><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">4L</span>);</span><br><span class="line">user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;lisi@qq.com&quot;</span>);</span><br><span class="line">userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询功能</span></span><br><span class="line"><span class="comment">//1.根据id查询用户信息</span></span><br><span class="line"><span class="comment">//SELECT id,name,age,email FROM user WHERE id=?</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">//2.批量查询</span></span><br><span class="line"><span class="comment">//SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">List&lt;Long&gt; result = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectBatchIds(result);</span><br><span class="line">System.out.println(users);</span><br><span class="line"><span class="comment">//3.根据map条件来查</span></span><br><span class="line">SELECT id,name,age,email FROM user <span class="type">WHERE</span> <span class="variable">name</span> <span class="operator">=</span> ? <span class="type">AND</span> <span class="variable">age</span> <span class="operator">=</span> ?</span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">System.out.println(users);</span><br><span class="line"><span class="comment">//4.查询所有（条件不写）</span></span><br><span class="line"><span class="comment">//SELECT id,name,age,email FROM user</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">      System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="10-如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）"><a href="#10-如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）" class="headerlink" title="10.如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）"></a>10.如何实现复杂的功能（如多表查询）和mybatis一样（注意：map里放的是一列数据的多个字段）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yml:mapper-locations: 指定xml文件目录，不写默认是resource/mapper</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.zzh.mybatisplus.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectMapById&quot;</span> resultType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">        select id,name,age,email from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义：根据用户信息为map集合</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectMapById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//select id,name,age,email from user where id=?</span></span><br><span class="line">Map&lt;String, Object&gt; map = userMapper.selectMapById(<span class="number">1l</span>);<span class="comment">//key是列名，value是列值</span></span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><h6 id="11-mybatisplus不仅可以提供mapper-还可以提供service的方法-Iservice"><a href="#11-mybatisplus不仅可以提供mapper-还可以提供service的方法-Iservice" class="headerlink" title="11.mybatisplus不仅可以提供mapper,还可以提供service的方法(Iservice)"></a>11.mybatisplus不仅可以提供mapper,还可以提供service的方法(Iservice)</h6><p>1）为了避免和mapper混淆，get:查询单行，remove删除，list查询集合，save添加，saveOrUpdate添加或修改，page分页等<strong>前缀命名方式</strong><br>2）如果存在自定义通用service方法，请创建自己的iBaseService继承Mybatis-plus提供的基类，Iservice是接口，serviceImpl是实现类<br>3）对象Wrapper为条件构造器<br>4）saveOrUpdate，如果有id就是添加，如果没有id就是修改</p><p>注意：不介意直接使用serviceImpl，因为自己的业务往往比较复杂</p><h6 id="12-service方法的使用"><a href="#12-service方法的使用" class="headerlink" title="12.service方法的使用"></a>12.service方法的使用</h6><p>细节：<br>1）Iservice和ServiceImpl是框架自带的 ServiceImpl继承Iservice接口<br>2）如果想实现UserService接口，需要实现它的方法，此时继承ServiceImpl就无需重写方法<br>3）ServiceImpl接收的泛型参数是&lt;mapper，Pojo&gt;<br>4）我们可以使用iservice提供的功能，也能使用自定义的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询总条数</span></span><br><span class="line"><span class="comment">//select count(*) from user</span></span><br><span class="line"><span class="type">long</span> count=userService.count();</span><br><span class="line">System.out.println(<span class="string">&quot;总记录数&quot;</span>+count);<span class="comment">//相当于count*</span></span><br><span class="line"><span class="comment">//批量添加（mapper的方法只能添加一条）</span></span><br><span class="line"><span class="comment">//相当于循环添加，语句是：INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? )执行了10次</span></span><br><span class="line">List&lt;User&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;zzh&quot;</span>+i);</span><br><span class="line">    user.setAge(<span class="number">20</span>+i);</span><br><span class="line">    list.add(user);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(list);<span class="comment">//批量添加</span></span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h6 id="13-问题引出-TableName和-TableId注解（比如user实体类和表t-user不一样的时候）"><a href="#13-问题引出-TableName和-TableId注解（比如user实体类和表t-user不一样的时候）" class="headerlink" title="13.问题引出@TableName和@TableId注解（比如user实体类和表t_user不一样的时候）"></a>13.问题引出@TableName和@TableId注解（比如user实体类和表t_user不一样的时候）</h6><p>解决方法：<br>1.在实体类(pojo)上加注解@TableName(“t_user”)<br>2.如果所有实体类都有一个指定前缀比如t_，此时可以考虑全局配置,有点像spring prefix</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global-config:</span></span><br><span class="line">  <span class="attr">db-config:</span></span><br><span class="line">    <span class="string">table-prefix:t_</span></span><br></pre></td></tr></table></figure><h6 id="14-mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略-tableId"><a href="#14-mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略-tableId" class="headerlink" title="14.mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略@tableId"></a>14.mybatisplus默认将”id”设为主键，当pojo类id和表的主键为uid的时候解决策略@tableId</h6><p>解决方法：@tableid加在属性上，将属性所对应的字段指定为主键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId</span></span><br><span class="line"><span class="keyword">private</span> Long uid;</span><br><span class="line">假如实体类是id,表里的主键字段是uid</span><br><span class="line"></span><br><span class="line"><span class="meta">@tableId</span>注解的value属性用于指定主键的字段    </span><br><span class="line"><span class="meta">@TableId(value=&quot;uid&quot;)</span><span class="comment">//value不写也行</span></span><br><span class="line"><span class="keyword">private</span> Long uid</span><br></pre></td></tr></table></figure><h6 id="15-设置主键生成策略"><a href="#15-设置主键生成策略" class="headerlink" title="15.设置主键生成策略"></a>15.设置主键生成策略</h6><p>设置自动递增<br>1.说明，如果数据库设置成递增而mybatisplus使用的是雪花算法时默认是雪花算法<br>设置自动递增前要先保证数据库的主键自动递增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(value=&quot;uid&quot;，type=IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Long uid</span><br></pre></td></tr></table></figure><p>设置全局自增策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment">#配置mybatis-plus的全局配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto#全局自增</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="16-雪花算法"><a href="#16-雪花算法" class="headerlink" title="16.雪花算法"></a>16.雪花算法</h6><p>主从复制：主服务器实现写的功能，从服务器实现读的功能，各施其职，读写分离<br>单表拆分两种方式：垂直分表和水平分表</p><p>雪花算法：分布式算法，能保证不同的表的主键的不重复性，以及相同表的主键的有序性（随着时间推移，后面生成的数永远比前面大）</p><h6 id="17-处理其他字段和实体属性不一样的情况（-TableField）"><a href="#17-处理其他字段和实体属性不一样的情况（-TableField）" class="headerlink" title="17.处理其他字段和实体属性不一样的情况（@TableField）"></a>17.处理其他字段和实体属性不一样的情况（@TableField）</h6><p>情况一：mybatisplus框架自动可以将表中的下划线命名user_name转换为驼峰命名userName<br>情况二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Tablefield(&quot;user_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long name</span><br></pre></td></tr></table></figure><h6 id="18-逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除"><a href="#18-逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除" class="headerlink" title="18:逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除"></a>18:逻辑删除：场景：用户删除后想恢复，表中真正数据并未删除只是写一个新字段，0表示未删除，1表示删除</h6><p>说明：此种删除本质是修改，此时用户查询数据看不到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeleted;<span class="comment">//添加注解后执行的delete语句都是逻辑删除</span></span><br></pre></td></tr></table></figure><h6 id="19-条件构造器Wrapper"><a href="#19-条件构造器Wrapper" class="headerlink" title="19.条件构造器Wrapper"></a>19.条件构造器Wrapper</h6><p>Wrapper ： 条件构造抽象类，最顶端父类<br> AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<br> QueryWrapper ： 查询条件封装<br>UpdateWrapper ： Update 条件封装<br>AbstractLambdaWrapper ： 使用Lambda 语法<br>LambdaQueryWrapper ：用于Lambda语法使用的查询<br>Wrapper LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用链式表达式</span></span><br><span class="line"><span class="comment">//QueryWrapper指定实体类的泛型,查询用户名包含a,年龄在20-30之间，邮箱信息不为null的用户信息</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (user_name LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//ge&gt;=   le&lt;=</span></span><br><span class="line">queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>)<span class="comment">//user_name与数据库字段名相同</span></span><br><span class="line">         .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">         .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="20-组装排序条件"><a href="#20-组装排序条件" class="headerlink" title="20.组装排序条件"></a>20.组装排序条件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户信息，先按年龄降序排序，若年龄相同，则按照id升序排序</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper = queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">        .orderByAsc(<span class="string">&quot;uid&quot;</span>);<span class="comment">//是表中的字段名</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><h6 id="21-组装删除条件（仍然用的是queryWrapper）"><a href="#21-组装删除条件（仍然用的是queryWrapper）" class="headerlink" title="21.组装删除条件（仍然用的是queryWrapper）"></a>21.组装删除条件（仍然用的是queryWrapper）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除邮箱是null的信息 因为添加了逻辑删除，实际是修改</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br></pre></td></tr></table></figure><h6 id="22-实现修改功能"><a href="#22-实现修改功能" class="headerlink" title="22.实现修改功能"></a>22.实现修改功能</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line"><span class="comment">//UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND age &gt; ? OR</span></span><br><span class="line"><span class="comment">// email IS NULL)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//默认情况是and</span></span><br><span class="line">queryWrapper</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">        .or()</span><br><span class="line">        .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();<span class="comment">//要修改的字段的属性值放进去.封装进行修改</span></span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h6 id="23-条件的优先级"><a href="#23-条件的优先级" class="headerlink" title="23.条件的优先级"></a>23.条件的优先级</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户名中含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line"><span class="comment">//lambda中的条件优先执行,消费者模式consumer</span></span><br><span class="line"><span class="comment">//UPDATE t_user SET user_name=?, email=? WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NULL))</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)<span class="comment">//此处使用and()+lambda可以优先执行，or()也有此种用法</span></span><br><span class="line">                .or()</span><br><span class="line">                .isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUser_name(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;test@zzh.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">System.out.println(update);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="24-查询功能，仅仅查询某一些字段"><a href="#24-查询功能，仅仅查询某一些字段" class="headerlink" title="24.查询功能，仅仅查询某一些字段"></a>24.查询功能，仅仅查询某一些字段</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户信息的username和age和邮箱字段</span></span><br><span class="line"><span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.select(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;age&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : maps) &#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//&#123;user_name=zzh0, age=20&#125;</span></span><br><span class="line"><span class="comment">//&#123;user_name=zzh1, age=21&#125;</span></span><br></pre></td></tr></table></figure><h6 id="25-组装子查询"><a href="#25-组装子查询" class="headerlink" title="25.组装子查询"></a>25.组装子查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询id小于等于100的用户信息</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (id IN (select id from t_user where id &lt;=100))</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from t_user where id &lt;=100&quot;</span>);<span class="comment">//前一个id代表要判断的条件</span></span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="26-updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null"><a href="#26-updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null" class="headerlink" title="26.updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null"></a>26.updateWrapper不仅可以修改，还可以设置要修改的字段，但实体类参数传null</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UPDATE t_user SET user_name=?,email=? WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NOT NULL))</span></span><br><span class="line">UpdateWrapper&lt;User&gt; userUpdateWrapper=<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userUpdateWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">UpdateWrapper&lt;User&gt; result = userUpdateWrapper.set(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;小黑&quot;</span>).set(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;123456@qq.com&quot;</span>);</span><br><span class="line">userMapper.update(<span class="literal">null</span>,userUpdateWrapper);<span class="comment">//不用设置实体类对象了</span></span><br><span class="line">System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br></pre></td></tr></table></figure><h6 id="27-模拟用户前台发送多个条件的校验"><a href="#27-模拟用户前台发送多个条件的校验" class="headerlink" title="27.模拟用户前台发送多个条件的校验"></a>27.模拟用户前台发送多个条件的校验</h6><p>1.困难写法，此时为空串，只有20&lt;年龄&lt;30成立</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (age &gt;= ? AND age &lt;= ?)</span></span><br><span class="line">String username=<span class="string">&quot;&quot;</span>;</span><br><span class="line">Integer ageBegin=<span class="number">20</span>;</span><br><span class="line">Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(username))&#123;</span><br><span class="line">    <span class="comment">//StringUtils是mp提供的，判断字符是否不为空串，不为null,不为空白符</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ageBegin!=<span class="literal">null</span>)&#123;</span><br><span class="line">    queryWrapper.ge(<span class="string">&quot;age&quot;</span>,ageBegin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ageEnd!=<span class="literal">null</span>)&#123;</span><br><span class="line">    queryWrapper.le(<span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.简单写法，condition组装条件，符合条件就拼装，不复合就不拼装，<strong>其实就是底层封装了if</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String username=<span class="string">&quot;&quot;</span>;</span><br><span class="line">Integer ageBegin=<span class="number">20</span>;</span><br><span class="line">Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.like(StringUtils.isNotBlank(username),<span class="string">&quot;user_name&quot;</span>,username)</span><br><span class="line">        .ge(ageBegin!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageBegin)</span><br><span class="line">        .le(ageEnd!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageEnd);</span><br></pre></td></tr></table></figure><h6 id="28-lambdaQueryWrapper的使用"><a href="#28-lambdaQueryWrapper的使用" class="headerlink" title="28.lambdaQueryWrapper的使用"></a>28.lambdaQueryWrapper的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义查询条件，有可能为null（用户未输入）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//避免使用字符串表示字段，防止运行时错误</span></span><br><span class="line">queryWrapper</span><br><span class="line">.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">.ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">.le(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h6 id="29-LambdaUpdateWrapper的使用"><a href="#29-LambdaUpdateWrapper的使用" class="headerlink" title="29.LambdaUpdateWrapper的使用"></a>29.LambdaUpdateWrapper的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">updateWrapper</span><br><span class="line">.set(User::getAge, <span class="number">18</span>)</span><br><span class="line">.set(User::getEmail, <span class="string">&quot;userzzh.com&quot;</span>)</span><br><span class="line">.like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">.and(i -&gt; i.lt(User::getAge, <span class="number">24</span>).or().isNull(User::getEmail)); <span class="comment">//lambda</span></span><br><span class="line">表达式内的逻辑优先运算</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h6 id="30-分页插件"><a href="#30-分页插件" class="headerlink" title="30.分页插件"></a>30.分页插件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.zzh.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//先进行查询，在查询的基础上进行拦截</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//配置分页插件</span></span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//SELECT id,user_name,age,email,is_deleted FROM t_user WHERE is_deleted=0 LIMIT ? 一个问号代表第一页显示几条数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusPluginsTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;User&gt; page= <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//limit复习,limit（当前页页码，条数），总条数：当前页码-1*条数</span></span><br><span class="line">        <span class="comment">//null代表不带有条件</span></span><br><span class="line">        Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(userPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="31-自定义分页插件"><a href="#31-自定义分页插件" class="headerlink" title="31.自定义分页插件"></a>31.自定义分页插件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">#配置类型别名所对应的包</span></span><br><span class="line"><span class="attr">type-aliases-package:</span> <span class="string">com.zzh.mybatisplus.pojo</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过年龄查询用户信息并分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page Mybatis-plus所提供的分页对象，必须位于第一个参数位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;selectPageVo&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">    select id,user_name,age,email from t_user where age&gt; #&#123;age&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">Page&lt;User&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">userMapper.selectPageVo(page,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h6 id="32-乐观锁和悲观锁："><a href="#32-乐观锁和悲观锁：" class="headerlink" title="32.乐观锁和悲观锁："></a>32.乐观锁和悲观锁：</h6><p>悲观锁：令狐冲操作的时候，岳不群一直在阻塞状态<br>乐观锁（version）：如果版本匹配不上，放弃修改</p><h6 id="33-模拟乐观锁冲突"><a href="#33-模拟乐观锁冲突" class="headerlink" title="33.模拟乐观锁冲突"></a>33.模拟乐观锁冲突</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小李和小王同时查询</span></span><br><span class="line"><span class="comment">//1、小李</span></span><br><span class="line">BaseMapper&lt;Object&gt; productMapper;</span><br><span class="line"><span class="type">Product</span> <span class="variable">p1</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小李取出的价格：&quot;</span> + p1.getPrice());</span><br><span class="line"><span class="comment">//2、小王</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p2</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小王取出的价格：&quot;</span> + p2.getPrice());</span><br><span class="line"><span class="comment">//3、小李将价格加了50元，存入了数据库</span></span><br><span class="line">p1.setPrice(p1.getPrice() + <span class="number">50</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> productMapper.updateById(p1);</span><br><span class="line">System.out.println(<span class="string">&quot;小李修改结果：&quot;</span> + result1);</span><br><span class="line"><span class="comment">//4、小王将商品减了30元，存入了数据库</span></span><br><span class="line">p2.setPrice(p2.getPrice() - <span class="number">30</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> productMapper.updateById(p2);</span><br><span class="line">System.out.println(<span class="string">&quot;小王修改结果：&quot;</span> + result2);</span><br><span class="line"><span class="comment">//最后的结果</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p3</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">//价格覆盖，最后的结果：70</span></span><br><span class="line">System.out.println(<span class="string">&quot;最后的结果：&quot;</span> + p3.getPrice());</span><br></pre></td></tr></table></figure><h6 id="34-乐观锁的实现"><a href="#34-乐观锁的实现" class="headerlink" title="34.乐观锁的实现"></a>34.乐观锁的实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span><span class="comment">//标识乐观锁版本号</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置分页插件</span></span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//配置乐观锁插件</span></span><br><span class="line">interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line"></span><br><span class="line">实现后执行以上代码，结果是<span class="number">150</span>，版本号+<span class="number">1</span>，因为小李和小王是同时获取的，所以小王获取的是<span class="number">0</span>，和<span class="number">1</span>版本匹配不上，修改不了，所以还是<span class="number">150</span></span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小李和小王同时查询</span></span><br><span class="line"><span class="comment">//1、小李</span></span><br><span class="line">BaseMapper&lt;Object&gt; productMapper;</span><br><span class="line"><span class="type">Product</span> <span class="variable">p1</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小李取出的价格：&quot;</span> + p1.getPrice());</span><br><span class="line"><span class="comment">//2、小王</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p2</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小王取出的价格：&quot;</span> + p2.getPrice());</span><br><span class="line"><span class="comment">//3、小李将价格加了50元，存入了数据库</span></span><br><span class="line">p1.setPrice(p1.getPrice() + <span class="number">50</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> productMapper.updateById(p1);</span><br><span class="line">System.out.println(<span class="string">&quot;小李修改结果：&quot;</span> + result1);</span><br><span class="line"><span class="comment">//4、小王将商品减了30元，存入了数据库</span></span><br><span class="line">p2.setPrice(p2.getPrice() - <span class="number">30</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> productMapper.updateById(p2);<span class="comment">//0代表操作失败</span></span><br><span class="line">System.out.println(<span class="string">&quot;小王修改结果：&quot;</span> + result2);</span><br><span class="line"><span class="keyword">if</span>(result2 == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//失败重试，重新获取version并更新</span></span><br><span class="line">p2 = productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">p2.setPrice(p2.getPrice() - <span class="number">30</span>);</span><br><span class="line">result2 = productMapper.updateById(p2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;小王修改重试的结果：&quot;</span> + result2);</span><br><span class="line"><span class="comment">//最后的结果</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">p3</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">//价格覆盖，最后的结果：70</span></span><br><span class="line">System.out.println(<span class="string">&quot;最后的结果：&quot;</span> + p3.getPrice());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(不愿面对版)</title>
      <link href="/2022/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>明天再说</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git1初始版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git必知必会2（书接上文完结版）</title>
      <link href="/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit2/"/>
      <url>/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h6 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEGY6I.png"></p><h6 id="修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容"><a href="#修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容" class="headerlink" title="修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容"></a>修改hot-fix分支后切换到master并且合并，此时头指针指向hot-fix分支的内容</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEY8sI.md.png"></p><h6 id="idea版两个版本提交后的冲突解决，解决完自动提交"><a href="#idea版两个版本提交后的冲突解决，解决完自动提交" class="headerlink" title="idea版两个版本提交后的冲突解决，解决完自动提交"></a>idea版两个版本提交后的冲突解决，解决完自动提交</h6><p><img src="https://s1.ax1x.com/2022/03/19/qENLxH.md.png"></p><h6 id="idea集成github"><a href="#idea集成github" class="headerlink" title="idea集成github:"></a>idea集成github:</h6><p>settings-&gt;version Control -&gt;github—-&gt;登录</p><h6 id="分享项目发到github"><a href="#分享项目发到github" class="headerlink" title="分享项目发到github:"></a>分享项目发到github:</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEaqud.md.png"></p><p>1.remote:别名，一般和库名一致<br>2.repository name:库名，一般和项目名保持一致<br>3.private:私有库</p><h6 id="idea中push的两种方式"><a href="#idea中push的两种方式" class="headerlink" title="idea中push的两种方式"></a>idea中push的两种方式</h6><p><img src="https://s1.ax1x.com/2022/03/19/qE0M7R.md.png"></p><p><img src="https://s1.ax1x.com/2022/03/19/qE0D4P.md.png"></p><h6 id="使用ssh免密登录push"><a href="#使用ssh免密登录push" class="headerlink" title="使用ssh免密登录push"></a>使用ssh免密登录push</h6><p><a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>:zzhcat&#x2F;git-test.git</p><p><img src="https://s1.ax1x.com/2022/03/19/qE0jER.png"></p><p><img src="https://s1.ax1x.com/2022/03/19/qEBZ5t.png"></p><h6 id="直接在github上修改代码，此时比本地库更新了，需要pull下来"><a href="#直接在github上修改代码，此时比本地库更新了，需要pull下来" class="headerlink" title="直接在github上修改代码，此时比本地库更新了，需要pull下来"></a>直接在github上修改代码，此时比本地库更新了，需要pull下来</h6><p>注意：push是将本地库代码推送到远程库，如果本地库代码跟远程库代码不一致，push的操作会被拒绝，也就是说，要想push成功，一定要保证本地库的版本要比远程库版本高！<strong>因此一个成熟的程序员在动手修改本地代码之前，一定要先检查远程库跟本地库代码的区别！如果本地库代码版本已经落后，切记要先pull拉取一下远程哭，在将本地代码更新后，发送到远程库</strong>push之前，请你先pull一下，而且你拉取的时候一定要确保本地的代码不更改</p><h6 id="新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）"><a href="#新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）" class="headerlink" title="新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）"></a>新建项目git（重要，进公司要用），把代码克隆到本地（克隆别人的代码）</h6><p>1.点击get from version control<br>2.选择git方式，选择ssh协议（http协议）</p><h6 id="小结1："><a href="#小结1：" class="headerlink" title="小结1："></a>小结1：</h6><p>git clone是克隆，git pull 是拉。<br>但是，也有区别：<br>从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库，叫做clone.（clone是将一个库复制到你的本地，是一个本地从无到有的过程）<br>从远程服务器获取到一个branch分支的更新到本地，并更新本地库，叫做pull.（pull是指同步一个在你本地有版本的库内容更新的部分到你的本地库）<br>git pull相当于是从远程获取最新版本并merge（合并）到本地     git pull &#x3D; git fetch + git merge，git fetch更安全一些<br>git clone是远程操作的第一步，通常是从远程主机克隆一个版本库，eg:$ git clone ##   该命令会在本地主机生成一个目录，与远程主机的版本库同名，如果要是制定不同的目录名，可以将目录名作为git clone 命令的第二个参数。eg：$ git clone #版本库网址# #本地目录名#     git clone支持多种协议，除了http（s),还有ssh,git,本地协议。<br>git pull 作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。eg:$ git pull ##远程主机（origin） #远程分之(next)#：#本地分之(master)#<br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。eg:$ git pull #远程主机(origin)#　 #远程分之(next)#　相当于1. $ git fetch origin   2.$git merge origin&#x2F;next<br>在某些场合，git会自动在本地和远程分之之间，建立一种追踪关系。比如，在git clone 的时候，所有本地分之默认与远程主机的同名分之，建立追踪关系，也就是，本地的master分之自动“追踪”origin&#x2F;master分之。git 可以手动建立追踪， git branch –set-upstream master origin&#x2F;next   —&gt;指定master分之追踪到origin&#x2F;next。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。$ git pull  表示当前分之自动与唯一一个追踪分之进行合并。</p><h6 id="小结2：工作之前要先git-init一下工作区间，在克隆代码，接着可以pull，修改，push"><a href="#小结2：工作之前要先git-init一下工作区间，在克隆代码，接着可以pull，修改，push" class="headerlink" title="小结2：工作之前要先git init一下工作区间，在克隆代码，接着可以pull，修改，push"></a>小结2：工作之前要先git init一下工作区间，在克隆代码，接着可以pull，修改，push</h6><h6 id="码云多处和github差不多，这里就不浪费时间记笔记了"><a href="#码云多处和github差不多，这里就不浪费时间记笔记了" class="headerlink" title="码云多处和github差不多，这里就不浪费时间记笔记了"></a>码云多处和github差不多，这里就不浪费时间记笔记了</h6>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git2完成版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git必知必会（详细版）</title>
      <link href="/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit/"/>
      <url>/2022/03/17/%E4%B8%80%E5%A4%A9%E5%AD%A6%E4%BC%9Agit/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="Git介绍：分布式版本控制工具"><a href="#Git介绍：分布式版本控制工具" class="headerlink" title="Git介绍：分布式版本控制工具"></a>Git介绍：分布式版本控制工具</h4><h6 id="git"><a href="#git" class="headerlink" title="git"></a>git</h6><p>git常用命令<br>idea集成git</p><h6 id="github"><a href="#github" class="headerlink" title="github"></a>github</h6><p>创建远程库<br>代码推送:push<br>代码拉取:pull<br>代码克隆：clone<br>ssh免密登录<br>idea集成github</p><h6 id="gitee码云"><a href="#gitee码云" class="headerlink" title="gitee码云"></a>gitee码云</h6><p>idea继承Gitee码云<br>码云连接GitHub进行代码的复制和迁移</p><h6 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h6><p>gitLab服务器的搭建和部署<br>idea集成Gitlab</p><h6 id="集中式版本SVN-CSV等"><a href="#集中式版本SVN-CSV等" class="headerlink" title="集中式版本SVN,CSV等:"></a>集中式版本SVN,CSV等:</h6><p>概念<br>a把a的代码提交到中央服务器版本是a1,b把a的代码拉下来修改提交到中央服务器是a2,c把a或者b的代码拉下来修改提交到中央服务器版本是a3，缺点：单点故障：如果中央服务器坏了，完犊子三个人谁都别想提交，不能做版本控制,好处：管理员好管理，可以开放权限，架构师看的代码多，实习生看的代码少</p><h6 id="分布式版本控制工具："><a href="#分布式版本控制工具：" class="headerlink" title="分布式版本控制工具："></a>分布式版本控制工具：</h6><p>概念<br>每个人的电脑都是一台”中央服务器“，git有远程库A上传到远程库，B可以拉下来A的远程库代码，在自己的电脑做版本控制，在本地可以做版本控制，一般远程库不能故障，即使故障，在远程库都是最新的代码，在本地库都是不同的版本</p><h6 id="git工作机制-git只是版本控制，并不生成副本-："><a href="#git工作机制-git只是版本控制，并不生成副本-：" class="headerlink" title="git工作机制(git只是版本控制，并不生成副本)："></a>git工作机制(git只是版本控制，并不生成副本)：</h6><p>工作区（写代码）git add——-&gt;临时存储（暂存区）gitcommit——&gt;本地库（历史版本）<br>工作区：代码在磁盘存放的位置（非idea），执行git add到暂存区<br>暂存区：代码<u>添加</u>到暂存区 提交本地库执行commit<br>本地库：一旦提交到本地库就生成历史版本，提交到本地库的版本删不掉(比如提交了v3删不掉，只能提交v4重新提交)</p><h6 id="代码托管中心（远程库）："><a href="#代码托管中心（远程库）：" class="headerlink" title="代码托管中心（远程库）："></a>代码托管中心（远程库）：</h6><p>从本地库推送到远程库（push），全世界人都能看到<br>局域网–gitlab<br>互联网–GitHub(外网)，Gitee(国内网站)</p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p>ctrl+l：翻页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">on branch master代表主干分支</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前git版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git --version</span></span><br><span class="line">git version 2.34.0.windows.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首次一定要设置用户签名，否则无法提交代码，签名的作用是区分不同的操作者的身份</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置用户签名（用户名）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name zzh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置用户签名（设置邮箱,不会验证，不用设置真正的邮箱）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email 3081309881@qq.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化基本库(生成.git是隐藏文件，想查看需要ll-a)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line">Initialized empty Git repository in E:/git/Git-space/git-demo/.git/</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看git的本地库状态（在命令行yy复制，p是粘贴）-------一次操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status（红色代表在工作区）</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        hello.txt(红色)</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt（此时在暂存区）</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working direct</span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   hello.txt（绿色）</span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached hello.txt(只是删除了暂存区的git，工作的git还在)</span></span><br><span class="line">rm &#x27;hello.txt&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll   说明暂存区是可以删除的</span></span><br><span class="line">total 5</span><br><span class="line">drwxr-xr-x 1 zzh 197121  0 Mar 17 18:17 ./</span><br><span class="line">drwxr-xr-x 1 zzh 197121  0 Mar 17 18:09 ../</span><br><span class="line">drwxr-xr-x 1 zzh 197121  0 Mar 17 18:25 .git/</span><br><span class="line">-rw-r--r-- 1 zzh 197121 19 Mar 17 18:17 hello.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">继续添加到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从暂存区提交到本地库，添加历史版本（f04bded]就是版本号）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;firstcommit&quot;</span> hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">[master (root-commit) f04bded] firstcommit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看提交后的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean（提交后了）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看日志版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">f04bded (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): firstcommit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看日志版本（详细版）f04bdeda7d54eaf8ab4138efd267155fc72a350f版本号</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line">commit f04bdeda7d54eaf8ab4138efd267155fc72a350f (HEAD -&gt; master)</span><br><span class="line">Author: zzh &lt;3081309881@qq.com&gt;</span><br><span class="line">Date:   Thu Mar 17 18:32:46 2022 +0800</span><br><span class="line"></span><br><span class="line">    firstcommit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello,git,hellozzh   2222222222222222222222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status <span class="comment">#（modified）此时提示已经被修改了，但是此次的修改还没有添加到暂存区</span></span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   hello.txt（红色）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt<span class="comment">#在暂存区当中</span></span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   hello.txt(绿色)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提交本地库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;second commit&quot;</span> hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">[master 3ead1a7] second commit</span><br><span class="line"> 1 file changed,   1 insertion(+), 1 deletion(-)#一行新增一行删除代表修改，因为git只认删除和修改</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean#说明被提交了中间工作节点干净了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: second commit#代表指针指向第二个版本</span><br><span class="line">f04bded HEAD@&#123;1&#125;: commit (initial): firstcommit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git版本穿梭"><a href="#git版本穿梭" class="headerlink" title="git版本穿梭"></a>git版本穿梭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">穿梭到第二个版本 从.git当中可以看出来HEAD---&gt;MASTER分支---&gt;git版本 f04bded</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 3ead1a7</span></span><br><span class="line">HEAD is now at 3ead1a7 second commit</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;1&#125;: commit: third commit</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: second commit#此时箭头指向第二个版本</span><br><span class="line">f04bded HEAD@&#123;3&#125;: commit (initial): firstcommit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git分支操作-重要-：多头操作互不影响"><a href="#git分支操作-重要-：多头操作互不影响" class="headerlink" title="git分支操作(重要)：多头操作互不影响"></a>git分支操作(重要)：多头操作互不影响</h4><h4 id="合并冲突：同一个文件被不同的分支修改"><a href="#合并冲突：同一个文件被不同的分支修改" class="headerlink" title="合并冲突：同一个文件被不同的分支修改"></a>合并冲突：同一个文件被不同的分支修改</h4><p>master和hot-fix发生冲突手动修改后，master版本会变,hot-fix版本不会变<br>master不修改hop-fix修改,master合并hop-fix后他俩的head指向同一个版本，即是hop-fix的版本</p><h6 id="合并后指针指向两个合并过的分支"><a href="#合并后指针指向两个合并过的分支" class="headerlink" title="合并后指针指向两个合并过的分支"></a>合并后指针指向两个合并过的分支</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">合并后指向HEAD指向master和hotfix版本是65763e9</span><br><span class="line">65763e9 (HEAD -&gt; master, hot-fix) HEAD@&#123;0&#125;: merge hot-fix: Fast-forward</span><br><span class="line">3ead1a7 HEAD@&#123;1&#125;: checkout: moving from hot-fix to master</span><br><span class="line">65763e9 (HEAD -&gt; master, hot-fix) HEAD@&#123;2&#125;: commit: hot-fix firstcommit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 3ead1a7</span></span><br><span class="line">HEAD is now at 3ead1a7 second commit</span><br><span class="line">让指向master指针退回到版本3ead1a7，此时hotfix版本还是指向65763e9</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3ead1a7</span><br><span class="line">65763e9 (hot-fix) HEAD@&#123;1&#125;: merge hot-fix: Fast-forward</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;2&#125;: checkout: moving from hot-fix to master</span><br><span class="line">65763e9 (hot-fix) HEAD@&#123;3&#125;: commit: hot-fix firstcommit</span><br><span class="line">08b7c0e HEAD@&#123;4&#125;: checkout: moving from master to hot-fix</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;5&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;6&#125;: reset: moving to 08b7c0e</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;7&#125;: reset: moving to 3ead1a7</span><br><span class="line">f04bded HEAD@&#123;8&#125;: reset: moving to f04bded</span><br><span class="line">3ead1a7 (HEAD -&gt; master) HEAD@&#123;9&#125;: reset: moving to 3ead1a7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前实验结果为：</p><p>假设有master和branch1，用master合并branch1时（在master分支中执行git merge branch1）：</p><p>1、在同一个地方，master做了修改，branch1没有修改，则合并后是修改了的</p><p>2、在同一个地方，master没有修改，branch1修改了，则合并和还是修改了的</p><p>也就是说，在同一个地方，一个分支做了修改，另一个分支没有做修改，则合并后的结果总是修改了的</p><p>3、在同一个地方，两条分支都做了修改，则产生冲突。注意的是，这里说的同一个地方，并不一定是绝对一模一样的地方，而是在一个很小的范围内，都算同一个地方，</p><p>比如：master修改了第一行，而branch1修改的是第二行，这也算是同一个地方，git会认为这是在同一个地方两个分支都做了修改，因而会产生冲突。这个应该是跟文件系统的block相关了，猜测是同一个block都算是同一个地方。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">* master f04bded firstcommit#目前只有一个master分支，一个分支有三个版本</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch hot-fix</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">  hot-fix 08b7c0e third commit</span><br><span class="line">* master  08b7c0e third commit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到hot-fix分支（主分支是给客户用的）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout hot-fix</span></span><br><span class="line">Switched to branch &#x27;hot-fix&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接进行到部署（commit）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;hot-fix firstcommit&quot;</span> hello.txt</span></span><br><span class="line">On branch hot-fix</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">65763e9 (HEAD -&gt; hot-fix) HEAD@&#123;0&#125;: commit: hot-fix firstcommit#这里指向的是hot-fix</span><br><span class="line">08b7c0e HEAD@&#123;1&#125;: checkout: moving from master to hot-fix</span><br><span class="line">3ead1a7 (master) HEAD@&#123;2&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;3&#125;: reset: moving to 08b7c0e</span><br><span class="line">3ead1a7 (master) HEAD@&#123;4&#125;: reset: moving to 3ead1a7</span><br><span class="line">f04bded HEAD@&#123;5&#125;: reset: moving to f04bded</span><br><span class="line">3ead1a7 (master) HEAD@&#123;6&#125;: reset: moving to 3ead1a7</span><br><span class="line">08b7c0e HEAD@&#123;7&#125;: commit: third commit</span><br><span class="line">3ead1a7 (master) HEAD@&#123;8&#125;: commit: second commit</span><br><span class="line">f04bded HEAD@&#123;9&#125;: commit (initial): firstcommit</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello,git,hellozzh   2222222 333333333</span><br><span class="line">iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换成master分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello,git,hellozzh   2222222222222222222222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">合并分支（把要合并的分支合并到当前分支）原则，值是看谁是最后修改的，但是改变的文件看的是谁调用的合并命令的。</span></span><br><span class="line">比如a中写$ git merge b hello，结果只是a中的hello.txt改变了，但是值取决于是谁最后修改的hello.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge hot-fix</span></span><br><span class="line">Updating 3ead1a7..65763e9</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">冲突合并：同一位置两个分支都合并（比如master和hopfix都修改了代码，这时需要我们手动的去修改代码。并且commit的时候不能加文件的名字（hello.txt）,因为它不知道你提交的是哪个hello.txt尚硅谷p18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="小结1：版本控制都是在本地的"><a href="#小结1：版本控制都是在本地的" class="headerlink" title="小结1：版本控制都是在本地的"></a>小结1：版本控制都是在本地的</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看和创建远程库,并起别名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add git-demo https://github.com/zzhcat/git--demo.git<span class="comment">#创建别名</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看别名：别名可以推送(push)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">git-demo        https://github.com/zzhcat/git--demo.git (fetch)</span><br><span class="line">git-demo        https://github.com/zzhcat/git--demo.git (push)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push git-demo master</span></span><br><span class="line">Enumerating objects: 24, done.</span><br><span class="line">Counting objects: 100% (24/24), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (13/13), done.</span><br><span class="line">Writing objects: 100% (24/24), 1.77 KiB | 604.00 KiB/s, done.</span><br><span class="line">Total 24 (delta 4), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (4/4), done.</span><br><span class="line">To https://github.com/zzhcat/git--demo.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改完远程库后，远程库和本地库不一样了，此时本地库需要拉取远程库的代码</span></span><br><span class="line">提示如果拉取失败需要：$ git config --global http.sslVerify &quot;false&quot;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull git-demo master</span></span><br><span class="line">remote: Enumerating objects: 5, done.</span><br><span class="line">remote: Counting objects: 100% (5/5), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 657 bytes | 38.00 KiB/s, done.</span><br><span class="line">From https://github.com/zzhcat/git--demo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   8ececc3..4b65f5d  master     -&gt; git-demo/master</span><br><span class="line">Updating 8ececc3..4b65f5d</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">4b65f5d (HEAD -&gt; master, git-demo/master) HEAD@&#123;0&#125;: pull git-demo master: Fast-f</span><br><span class="line">orward</span><br><span class="line">8ececc3 HEAD@&#123;1&#125;: checkout: moving from hot-fix to master</span><br><span class="line">62bb7a4 (hot-fix) HEAD@&#123;2&#125;: commit (merge): hot9 6dsa</span><br><span class="line">0f04668 HEAD@&#123;3&#125;: commit: hot9 6</span><br><span class="line">80528fa HEAD@&#123;4&#125;: checkout: moving from master to hot-fix</span><br><span class="line">8ececc3 HEAD@&#123;5&#125;: commit: master 23135</span><br></pre></td></tr></table></figure><h5 id="团队合作克隆代码（不演示，因为需要两个github账号）"><a href="#团队合作克隆代码（不演示，因为需要两个github账号）" class="headerlink" title="团队合作克隆代码（不演示，因为需要两个github账号）"></a>团队合作克隆代码（不演示，因为需要两个github账号）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git clone http://github.com/yueyue/git-demo.git  #我想拿到岳不群的代码</span><br><span class="line">执行后在我的库上生成三个tips</span><br><span class="line">1.克隆代码不需要账号密码</span><br><span class="line">2.初始化本地库</span><br><span class="line">3.创建别名（与岳不群的一样）</span><br><span class="line"></span><br><span class="line">如果我修改了我pull下来的hello.txt,提交本地库后，上传到远程库(岳不群的)之后，并且需要登录我的账号</span><br><span class="line">此时并不能提交上去，需要岳不群邀请我进华山派才能提交到岳不群的远程库</span><br><span class="line">解决方案：</span><br><span class="line">登录岳不群----&gt;settings------&gt;manage access---------&gt;invite a collaborator 输入对方的账号------&gt;完成后点击pending invite-------&gt;复制pending invite交给我（微信）---------&gt;我上号后复制pending invite邀请函-------&gt;在地址栏输入后接收邀请-----------&gt;此时我可以git push （岳不群的仓库） master-------&gt;此时远程库只有一份我提交的hello.txt---------&gt;但是岳不群本地有很多</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="跨团队合作（三人：东方不败与我们合作-我（令狐冲）岳不群-）外包"><a href="#跨团队合作（三人：东方不败与我们合作-我（令狐冲）岳不群-）外包" class="headerlink" title="跨团队合作（三人：东方不败与我们合作   我（令狐冲）岳不群 ）外包"></a>跨团队合作（三人：东方不败与我们合作   我（令狐冲）岳不群 ）外包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.我把项目链接发给东方不败</span><br><span class="line">2.东方不败点fork把岳不群的代码叉过来叉到自己的本地库（会显示 fork from yueyue/git-demo），在线修改代码hello.txt,点击下面commit（注意：此时只是修改了自己的的库的代码，和岳不群与我没什么关系）</span><br><span class="line">3.东方不败点击pull request，点击create pull request,并描述一些话，点击pullrequest 请求给岳不群</span><br><span class="line">4.岳不群打开账号点击pullrequest 点击链接文件即可看到修改的代码，并且可以添加评论</span><br><span class="line">5.岳不群点击merge:pull request合并东方不败的代码，此时岳不群的库就是东方不败发过来的代码，并且我也能看到</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SSH免密登录（以后拉代码方便）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登陆账号</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -C 3081309881@qq.com</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/zzh/.ssh/id_rsa):</span><br><span class="line">Created directory &#x27;/c/Users/zzh/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/zzh/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/zzh/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:UgCwDZIjB49ux1tMzvfCM29WVLSa1IGHgcAmLSZQG/w 3081309881@qq.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|o+*+..+.. ..=o   |</span><br><span class="line">|++.*o+ = . o.oo  |</span><br><span class="line">|ooo.=.+ .  .oo   |</span><br><span class="line">|. . =E .  ..o    |</span><br><span class="line">| o o =..S .o     |</span><br><span class="line">|. . o o..  .     |</span><br><span class="line">|   .   = ..      |</span><br><span class="line">|        =o       |</span><br><span class="line">|        o.       |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拿公钥</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> id_rsa.pub</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC6hDlBw4cutiKGlhQiWvOlSt4+h4CQAWVvxzM0DlCPYkj42wSsPH/S17COiLuP1pDZNywOp+qNQ9FcuTAAyA9bursX+6HfBexTh1eGJEoXorA62tVQ+RBfqZkPpx6aUJX1xJPLwcNZVXL+linf9Hk757LcT7p/njW970XjxyuN7UNKjW8d4RmqQrPCFvS10ZBzjs/htoMuDOSrJg5thVOXOlXVol6nzmzmUrUoPZOrtJyWnOgN/kL97vtD3YqZsbdx9onfi3Gexvh51fcNRRXxRhUGTbavWegbZVKs0NV77fmZvdQghU9G2hz87V4M9PERBjPVKDgOkMiEv1dzgE2UigZXb/SbwyxTOXNSuVeUXNaNCLAxhwZVLDX/i5/fykVqyruKz5QnJeLEWN6wnr2REViWY0JXeix9diASGo39+ZtTcYZSpm+nXlwm0ZA68XwjlVn7gHsY3Loaevr410AuT7pB7IbaJqdgFKQ1BGtXA/FNyNVXQXGADqZ0quq9luU= 3081309881@qq.com</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在本地仓库下</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull git@github.com:zzhcat/git--demo.git master <span class="comment">#git@github.com:zzhcat/git--demo为ssh地址</span></span></span><br><span class="line">From github.com:zzhcat/git--demo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此时可以修改代码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来"><a href="#小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来" class="headerlink" title="小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来"></a>小结：克隆和拉取的区别：pull是拉取，针对我已有的本地仓库，但是和远程仓库数据不相同的情况下，克隆是连本地库都没有，直接从远程库copy一份下来</h6><h4 id="idea集成git"><a href="#idea集成git" class="headerlink" title="idea集成git"></a>idea集成git</h4><h5 id="配置忽略文件-只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关"><a href="#配置忽略文件-只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关" class="headerlink" title="配置忽略文件 只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关"></a>配置忽略文件 只想要pom和代码文件：原因：不用部署到服务器上，与实际项目无关</h5><h6 id="1-配置git-ignore-前缀随便取-在user-x2F-zzh用户下"><a href="#1-配置git-ignore-前缀随便取-在user-x2F-zzh用户下" class="headerlink" title="1.配置git.ignore(前缀随便取)在user&#x2F;zzh用户下"></a>1.配置git.ignore(前缀随便取)在user&#x2F;zzh用户下</h6><h6 id="2-原则是放在哪里都可以，为了让-x2F-gitconfig文件引用"><a href="#2-原则是放在哪里都可以，为了让-x2F-gitconfig文件引用" class="headerlink" title="2.原则是放在哪里都可以，为了让~&#x2F;.gitconfig文件引用"></a>2.原则是放在哪里都可以，为了让~&#x2F;.gitconfig文件引用</h6><h6 id="x2F-x2F-3-此时pom-xml变红说明进行了版本控制（并没有commit和add"><a href="#x2F-x2F-3-此时pom-xml变红说明进行了版本控制（并没有commit和add" class="headerlink" title="&#x2F;&#x2F;3.此时pom.xml变红说明进行了版本控制（并没有commit和add)"></a><img src="https://img-blog.csdnimg.cn/479484acb9da4b5093e84a36d37d725f.png">&#x2F;&#x2F;3.此时pom.xml变红说明进行了版本控制（并没有commit和add)</h6><p><img src="https://img-blog.csdnimg.cn/bf8fa1535d0e40c780a8b46ac2699d31.png"></p><h6 id="4-此时pom-xml变绿说明提交到暂存区"><a href="#4-此时pom-xml变绿说明提交到暂存区" class="headerlink" title="4.此时pom.xml变绿说明提交到暂存区"></a>4.此时pom.xml变绿说明提交到暂存区</h6><h6 id="5-此时编写代码后有一个小弹框，点canal"><a href="#5-此时编写代码后有一个小弹框，点canal" class="headerlink" title="5.此时编写代码后有一个小弹框，点canal"></a>5.此时编写代码后有一个小弹框，点canal</h6><p><img src="https://img-blog.csdnimg.cn/9368124d00be461d9d459bd13493bc77.png"></p><h6 id="6-此时需要add，可以逐个add，也可以右击项目整个add"><a href="#6-此时需要add，可以逐个add，也可以右击项目整个add" class="headerlink" title="6.此时需要add，可以逐个add，也可以右击项目整个add"></a>6.此时需要add，可以逐个add，也可以右击项目整个add</h6><p><img src="https://img-blog.csdnimg.cn/8df34b6d2bbe45feaff23b6b4befa67e.png"></p><h6 id="7-commit到本地仓库输入版本"><a href="#7-commit到本地仓库输入版本" class="headerlink" title="7.commit到本地仓库输入版本"></a>7.commit到本地仓库输入版本</h6><p><img src="https://img-blog.csdnimg.cn/2b3956ab84d24f84915720f6648eab48.png"></p><h6 id="8-黄色的代表ignore的目录"><a href="#8-黄色的代表ignore的目录" class="headerlink" title="8.黄色的代表ignore的目录"></a>8.黄色的代表ignore的目录</h6><p><img src="https://img-blog.csdnimg.cn/57c81a53cecd47a3bc9f3bb313c8cf6d.png"></p><h6 id="9-代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add-commit"><a href="#9-代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add-commit" class="headerlink" title="9.代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add,commit"></a>9.代码修改会变蓝色，代表这个文件被追踪过，但是修改了，此时需要add,commit</h6><h6 id="10-提交后双击java文件可以看到前后版本变化"><a href="#10-提交后双击java文件可以看到前后版本变化" class="headerlink" title="10.提交后双击java文件可以看到前后版本变化"></a>10.提交后双击java文件可以看到前后版本变化</h6><p><img src="https://img-blog.csdnimg.cn/2a247d097e0c4b5a84cdaba543ac92f7.png"></p><h6 id="11-查询版本信息，左下角有Git-点击log即可看到版本信息"><a href="#11-查询版本信息，左下角有Git-点击log即可看到版本信息" class="headerlink" title="11.查询版本信息，左下角有Git,点击log即可看到版本信息"></a>11.查询版本信息，左下角有Git,点击log即可看到版本信息</h6><p><img src="https://s1.ax1x.com/2022/03/19/qEJcPe.png"></p><p><img src="https://img-blog.csdnimg.cn/877375e7d7684388a3af7363000bd535.png"></p><h6 id="12-右键点击切换版本，可以切换到以前的版本"><a href="#12-右键点击切换版本，可以切换到以前的版本" class="headerlink" title="12.右键点击切换版本，可以切换到以前的版本"></a>12.右键点击切换版本，可以切换到以前的版本</h6><p><img src="https://img-blog.csdnimg.cn/e2cd35f2ecdc47789a03882f94d84a32.png"></p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git1初始版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2022/03/17/%E5%89%8D%E8%A8%80/"/>
      <url>/2022/03/17/%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>hello,I’m zzh，今天心血来潮搭建了一个自己的博客，决定对Java全套进行二轮复习，因此搭了个小博客，记录下自己的成长，一下附上我之前手机记的一些小点。之后从git开始复习记笔记，这一次做到全面，细致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java基础（韩顺平）----&gt;javaweb(黑马程序员)----&gt;spring(动力节点)----&gt;springmvc(动力节点)--------&gt;mybatis(动力节点)-------&gt;SSMcrm项目（动力节点）-------&gt;linux(韩顺平)-----&gt;git(尚硅谷)  持续更新</span><br></pre></td></tr></table></figure><p>判断运行类型是不是student或者student的子类  </p><p>继承后子类可以直接写getname()</p><p>this&#x3D;&#x3D;obj相当于person.equals(person)</p><p>非静态方法可以用静态的方法或者成员</p><p>静态方法必须用静态变量，因为是在初始化阶段的</p><p>先调用代码块，后调用构造器，代码块是构造器补充机制</p><p>静态代码块就是类加载会执行，代码块是构造器’执行前都执行代码块，静态的只能加载一次</p><p>子类创建实例，父类也会加载，类加载比较靠前<br>先执行父类代码块和构造器，在执行子类的</p><p>静态的优先级都是一样的</p><p>先执行父类静态，在进行子类静态，然后父类代码块，父类构造器，子类代码块，子类构造器</p><p>子类构造器默认有super(),而且是在最前面，所以调用子类构造器先调用的是父类代码块和构造器</p><p>静态代码块和静态方法只能调用静态成员，因为是在类加载就用到了，普通方法&#x2F;代码块可以调用任意的</p><p>类的加载是全部加载完才会调用输出</p><p>1.是否子类继承父类就直接可以使用父类的方法</p><p>包装类.equals 重写equals方法了。比较的是值是否相等，比如string,Integer</p><p>俩对象都是new出来的肯定不&#x3D;&#x3D;</p><p>final修饰引用类型不能改变地址</p><p>string是不变的常量池，而stringbuffer是在堆中，后面扩容,char数组不是final</p><p>string-&gt;int   用integer.parseint(字符串)</p><p>int stringbuffer-&gt;string 用tostring</p><p>dom元素删除子节点需要先获得父节点</p><p>ctrl+alt+b可以看到接口的实现子类和子接口</p><p>重写方法alt+insert</p><p>ctrl+alt+箭头，可以对操作的文件切换</p><p>object转换成integer可以使用integer.parseint(数字+””)</p><p>getclass获取到的是运行类型</p><p>转换流inputstreamReader可以把字节流转换成字符流，但是只有字节流可以指定编码方式如gbk,utf8</p><p>线程用实现runnable接口的方式可以实现资源共享，比如多个new Thread(同一个线程)</p><p>while循环里面结束是break,方法结束是return</p><p>子类继承父类的public方法都不用写this就可以调用serlvetconfig应用实例3</p><p>参数都是tomcat给的，比如初始化方法init(serlvetconfig config)中的形参</p><p>字节输出流的write方法可以使用String.getBytes方法转换成字节数组，如”hello”.getbytes</p><p>一个服务器端口可以连接多个客户端socket</p><p>sql中的null参与运算的话要用ifnull转换成0</p><p>一般写都是字符串.equals(变量)，否则报空指针异常</p><p>请求转发的&#x2F;转换成&#x2F;server&#x2F;,所以不能请求到外网(请求转发实例)</p><p>&#x2F;如果被浏览器解析就是<a href="http://ip:port，如在html中，如果被服务器解析就是http//ip:port/工程路径，如在web.xml">http://ip:port，如在html中，如果被服务器解析就是http//ip:port/工程路径，如在web.xml</a> Java程序特殊情况response.sendRedict是发给浏览器的，&#x2F;代表浏览器解析</p><p>重定向不能用一个request域（getparamter或者setattrabute），因为不是一个对象</p><p>获取&#x2F;工程名 用getservletcontext().getcontextpath()</p><p>动态绑定机制用运行类型来看，当调用对象方法时候，该方法会和该对象的内存地址&#x2F;运行类型绑定，this也是如此，子类调用父类service中的this.dopost方法，这个this代表子类，servlet规范设计</p><p>方法里面的HSPResponse response即使没有实例化，也可以调用response.getOutputStream</p><p>有一种没创建就使用的感觉</p><p>clasd.getResource(“&#x2F;“).getpath()获得的是真实项目部署的路径（classes），不是源码路径的</p><p>servlet是单例的，只创建一个,tomcat用servletmapping用反射拿到一个servlet对象放入到集合中</p><p>groupby 查询字段当中只能出现被分组的字段和聚合函数，也就是非组函数的字段一定出现在groupby当中</p><p>groupby后面两个字段，代表两两相比，有一个不同的数据就查询出来</p><p>起完别名在where就不能用原来的了，只能在orderby中使用</p><p>过滤条件使用了聚合函数，则必须使用having，不包含聚合函数优先选择where(既有having和where用where)效率高</p><p>from on left where groupby having select distinct orderby limit 后面的不能放入前面，就像分组函数不能用在where，因为得分组才能用分组函数(聚合)  count(*)是在条件后来求总和的</p><p>每个工种每个部门，就是说groupby departmentid,jobid 两个条件来判断，两个条件只要有一个不同就是不同的()</p><p>子查询可以外面用where and连接多个子查询</p><p>子查询内部返回多条，外面也得用多条去接收，外面如in等</p><p>聚合函数不可以嵌套，但是聚合函数取别名之后可以，但是需要子查询满足(from 虚拟表 别名)方式</p><p>子查询可以把查到的数据当成一个新表:select…from(select min(sal) from employees groupby departmentid) “t_dept”这样取别名</p><p>子查询〈&#x3D;all(select…)代表小于等于最小的，反之大于等于更大的是用any</p><p>子查询里面有null值一定要小心，not in子查询的时候一定要小心子查询里面的空值</p><p>相关性的理解(看书)，from后面也可以跟着一个子查询，把子查询当成一个表</p><p>相关性相当于多表连接，而且是从外往里看</p><p>结论:子查询在groupby和limit之外，其他位置都可以声明子查询</p><p>where和having都有的时候优先用where，where优先执行，在where之前不能用分组函数(聚合函数)，之后groupby之后having可以用分组函数别名：select起的字段别名不能在where中使用，但是能在orderby中使用，<br>from on join(left) where groupby having select distinct orderby limit 后面的不能放入前面，就像分组函数不能用在where，因为得分组才能用分组函数(聚合)  count(*)是在条件后来求总和的</p><p>一般分组函数都起别名，但是在where中不能使用</p><p>求最小的可以用orderby在limit(0,1)<br>临时表(虚拟表)挺重要的，用查到的数据起别名</p><p>表名.*，用于select中</p><p>在查询字段处也可以写子查询</p><p>在html中直接写d1&#x2F;d2&#x2F;b.html 代表:http:localhost:8080&#x2F;工程路径&#x2F;d1&#x2F;d2&#x2F;b.html，在b.html访问a.html就是:http:localhost:8080&#x2F;工程路径&#x2F;d1&#x2F;d2&#x2F;a.html(有可能不在b.html同级目录中)所以引出base标签<br>在html中写&#x2F;b.html代表http:localhost:8080&#x2F;b.html(所以自己要加工程名)，在重定向中含义同上，转发可以访问到web-inf下面的页面，在server端的&#x2F;代表映射到web下面的工程路径</p><p>调试蓝色高亮或者下断点到哪代表:你是要执行这一步还是进入我的源码</p><p>转发浏览器url栏地址不变，所以不能用相对路径定位(cookie章作业评讲3)</p><p>获取上下文路径:getServletContext().getContextPath()  或者request.getcontextpath</p><p>默认关闭浏览器后cookies就不存在了，需要重新创建cookies,cookies消失与创建看的是浏览器，而不是servlet,cookies失效了，不代表他消失了，因为没关闭浏览器，只是在做http访问的时候请求不带cookies了，指定过期时间是对当前cookies说的，不是所有</p><p>一次会话代表打开&#x2F;关闭浏览器，而不是访问不同的servlet,会话是双向的，在servlet内修改后记得通知浏览器</p><p>不同会话(会话即是打开关闭浏览器，而不是开个窗口)，jsession不同一次会话代表打开关闭一次浏览器</p><p>根据setmaxAge&#x3D;0不代表生命周期到了，而是直接干掉了,不显示了，该cookies直接被删掉<br>from(子表的查询字段在外表也可以用)</p><p>cookie和session解决的是一次回话多次请求的数据共享，可以设置时间，cookie默认在关闭浏览器就消失了</p><p>object运行类型转换为String类型直接用toString方法就可以了</p><p>class类只能被加载一次，输出所有的hashcode发现是一个值</p><p>request.getContextPath()可以获取到上下文路径</p><p>转发要得到数据需要setattrabute,getattrabute</p><p>谁调用，this就代表谁，传入的是哪个对象，this就是谁，或者当前类的属性</p><p>responebody不走过滤器(对象和json和字符串)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/03/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/03/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h3><p>看见应该看不见的东西时，看见不应该看见的东西时，换作是你会怎么做呢……？</p><p>要是“那些东西”和你讲话，亦或是朝着你走过来的话，你又会怎么做呢……？</p><p>会拔腿就跑吗？还是会学习可疑的法术？又或者是会拜托灵媒师，选择战斗呢？女高中生‧四谷见子所采取的行动是——彻底的无视。</p><p>什么也没看见，什么也没察觉到。这是拥有着钢铁般的精神的女高中生靠着她的无视技能，回避那些异形般的可怕家伙们的故事</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzh.crm.commons.domain;</span><br><span class="line"><span class="comment">//返回的是一个json，推荐封装成实体类，并且在外面，多个包调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReturnObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;<span class="comment">//处理成功获取失败的标记：1---成功,0---失败</span></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> Object retData;<span class="comment">//其它数据，不确定的都是object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getRetData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> retData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRetData</span><span class="params">(Object retData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.retData = retData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/03/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/blog/source\images\a(12).png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
